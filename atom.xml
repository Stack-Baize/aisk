<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>攀岩之鹿</title>
  
  <subtitle>留下运维点滴记忆，悠悠岁月慢慢回味。</subtitle>
  <link href="https://aisk.cc/atom.xml" rel="self"/>
  
  <link href="https://aisk.cc/"/>
  <updated>2023-04-02T12:32:46.050Z</updated>
  <id>https://aisk.cc/</id>
  
  <author>
    <name>Jeremy Peng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux磁盘分区并挂载</title>
    <link href="https://aisk.cc/posts/76b2.html"/>
    <id>https://aisk.cc/posts/76b2.html</id>
    <published>2021-10-20T03:05:00.000Z</published>
    <updated>2023-04-02T12:32:46.050Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-查看系统磁盘"><a href="#0x01-查看系统磁盘" class="headerlink" title="0x01 查看系统磁盘"></a>0x01 查看系统磁盘</h2><p>使用<code>lsblk</code>可查看分区情况与磁盘大小，使用 <code>df -h</code> 命令，可以看到系统的磁盘使用情况，</p><p>如需要挂载 <code>/dev/sdb</code> 此存储到 <code>/data</code> 目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">##查看设备中磁盘</span></span><br><span class="line">lsblk</span><br><span class="line"><span class="comment">##查看磁盘挂载与使用情况</span></span><br><span class="line"><span class="built_in">df</span> -Th</span><br><span class="line">Filesystem     Type      Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs       devtmpfs  3.9G     0  3.9G   0% /dev</span><br><span class="line">tmpfs          tmpfs     3.9G     0  3.9G   0% /dev/shm</span><br><span class="line">tmpfs          tmpfs     3.9G  8.6M  3.9G   1% /run</span><br><span class="line">tmpfs          tmpfs     3.9G     0  3.9G   0% /sys/fs/cgroup</span><br><span class="line">/dev/vda2      xfs        92G  3.2G   89G   4% /</span><br><span class="line">tmpfs          tmpfs     783M     0  783M   0% /run/user/0</span><br></pre></td></tr></table></figure><h2 id="0x02-Linux-磁盘分区"><a href="#0x02-Linux-磁盘分区" class="headerlink" title="0x02 Linux 磁盘分区"></a>0x02 Linux 磁盘分区</h2><h3 id="标准分区挂载"><a href="#标准分区挂载" class="headerlink" title="标准分区挂载"></a>标准分区挂载</h3><h4 id="fdisk-分区工具"><a href="#fdisk-分区工具" class="headerlink" title="fdisk 分区工具"></a>fdisk 分区工具</h4><p>磁盘少于2T时可以使用<code>fdisk</code>分区，大于2T需要使用 <code>gdisk</code>工具</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 刷新硬件信息</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># partprobe</span></span><br><span class="line"><span class="comment">## 查看磁盘情况</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># lsblk</span></span><br><span class="line"><span class="comment">##新建分区</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># fdisk /dev/vda</span></span><br><span class="line">Welcome to fdisk (util-linux 2.23.2).</span><br><span class="line"><span class="comment">##创建分区</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n</span><br><span class="line">Partition <span class="built_in">type</span>:</span><br><span class="line">   p   primary (1 primary, 0 extended, 3 free)</span><br><span class="line">   e   extended</span><br><span class="line">Select (default p): p</span><br><span class="line">Partition number (2-4, default 2): 2</span><br><span class="line">First sector (16779264-209715199, default 16779264):</span><br><span class="line">Using default value 16779264</span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G&#125; (16779264-209715199, default 209715199):</span><br><span class="line">Using default value 209715199</span><br><span class="line">Partition 2 of <span class="built_in">type</span> Linux and of size 92 GiB is <span class="built_in">set</span></span><br><span class="line"><span class="comment">## 再次查看分区</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): p</span><br><span class="line"></span><br><span class="line">Disk /dev/vda: 107.4 GB, 107374182400 bytes, 209715200 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk label <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x000504a5</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/vda1            2048    16779263     8388608   82  Linux swap / Solaris</span><br><span class="line">/dev/vda2        16779264   209715199    96467968   83  Linux</span><br><span class="line"><span class="comment">## 检查分区是不否有错误</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): v</span><br><span class="line">Remaining 2047 unallocated 512-byte sectors</span><br><span class="line"><span class="comment">## 保存分区信息</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): w</span><br><span class="line">The partition table has been altered!</span><br><span class="line"></span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line"><span class="comment">## 刷新存储文件，centos6 使用 kpartx /dev/vda</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># partprobe</span></span><br><span class="line"><span class="comment">##格式化分区</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># mkfs.xfs /dev/vda2</span></span><br><span class="line"><span class="comment">##修改fstab并挂载</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># vim /etc/fstab</span></span><br><span class="line">/dev/vda2    /data   xfs     defaults   0 0</span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># mount -a</span></span><br><span class="line"><span class="comment">##查看分区挂载</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># df -Th</span></span><br></pre></td></tr></table></figure><h4 id="gdisk-分区工具"><a href="#gdisk-分区工具" class="headerlink" title="gdisk 分区工具"></a>gdisk 分区工具</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">##安装gdisk包</span></span><br><span class="line">yum install gdisk</span><br><span class="line"><span class="comment">##刷新存储</span></span><br><span class="line">[root@i-5C222F91 ~]<span class="comment"># partprobe</span></span><br><span class="line"><span class="comment">##创建分区</span></span><br><span class="line">[root@i-5C222F91 ~]<span class="comment"># gdisk /dev/vda</span></span><br><span class="line">Command (? <span class="keyword">for</span> <span class="built_in">help</span>): n</span><br><span class="line">Partition number (3-128, default 3): </span><br><span class="line"><span class="comment">#查看分区情况</span></span><br><span class="line">Command (? <span class="keyword">for</span> <span class="built_in">help</span>): p</span><br><span class="line">Number  Start (sector)    End (sector)  Size       Code  Name</span><br><span class="line">   1            2048         1026047   500.0 MiB   EF00  EFI System Partition</span><br><span class="line">   2         1026048         1640447   300.0 MiB   0700</span><br><span class="line">   3         1640448       104857566   49.2 GiB    8300  Linux filesystem</span><br><span class="line"><span class="comment">#修改分区类型</span></span><br><span class="line">Command (? <span class="keyword">for</span> <span class="built_in">help</span>): t</span><br><span class="line">Partition number (1-3): 3</span><br><span class="line">Hex code or GUID (L to show codes, Enter = 8300): 0700</span><br><span class="line"><span class="comment">#检查分区情况</span></span><br><span class="line">Command (? <span class="keyword">for</span> <span class="built_in">help</span>): v</span><br><span class="line"><span class="comment">#保存分区</span></span><br><span class="line">Command (? <span class="keyword">for</span> <span class="built_in">help</span>): w</span><br><span class="line"></span><br><span class="line">Do you want to proceed? (Y/N): y</span><br><span class="line"><span class="comment">#写入分区信息</span></span><br><span class="line"><span class="comment">##刷新存储</span></span><br><span class="line">[root@i-5C222F91 ~]<span class="comment"># partprobe</span></span><br><span class="line"><span class="comment">##格式化分区</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># mkfs.xfs /dev/vda2</span></span><br><span class="line"><span class="comment">##修改fstab并挂载</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># vim /etc/fstab</span></span><br><span class="line">/dev/vda2    /data   xfs     defaults   0 0</span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># mount -a</span></span><br><span class="line"><span class="comment">##查看分区挂载</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># df -Th</span></span><br></pre></td></tr></table></figure><h4 id="parted-分区工具"><a href="#parted-分区工具" class="headerlink" title="parted 分区工具"></a>parted 分区工具</h4><p>linux操作系统下有fdisk和parted两个分区工具，超过2T的磁盘只能使用parted进行分区，fdisk和parted分区方法也有很大的不同</p><p>使用<code>parted</code>分区工具需要注意磁盘数据，运行命令就已经开始执行分区操作</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">####刷新存储</span></span><br><span class="line">[root@i-5C222F91 ~]<span class="comment"># partprobe</span></span><br><span class="line"><span class="comment">##创建分区</span></span><br><span class="line">[root@i-5C222F91 ~]<span class="comment"># parted  /dev/sdb</span></span><br><span class="line"><span class="comment">##转换磁盘为gpt</span></span><br><span class="line">(parted)mklable gpt</span><br><span class="line"><span class="comment">##创建分区,0为开始分区大小，2T为结束分区大小</span></span><br><span class="line">(parted)mkpart primary 0 2T</span><br><span class="line">(parted)p</span><br><span class="line">(parted)q</span><br><span class="line"><span class="comment">##刷新存储</span></span><br><span class="line">[root@i-5C222F91 ~]<span class="comment"># partprobe</span></span><br><span class="line"><span class="comment">##格式化分区</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># mkfs.xfs /dev/vda2</span></span><br><span class="line"><span class="comment">##修改fstab并挂载</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># vim /etc/fstab</span></span><br><span class="line">/dev/vda2    /data   xfs     defaults   0 0</span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># mount -a</span></span><br><span class="line"><span class="comment">##查看分区挂载</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># df -Th</span></span><br></pre></td></tr></table></figure><h3 id="LVM分区挂载"><a href="#LVM分区挂载" class="headerlink" title="LVM分区挂载"></a>LVM分区挂载</h3><p>由于传统的磁盘管理不能对磁盘进行磁盘管理，因此诞生了LVM技术，LVM技术最大的特点就是对磁盘进行动态管理。由于LVM的逻辑卷的大小更改可以进行动态调整，且不会出现丢失数据的情况。</p><p>LVM（Logic Volume Manager）是逻辑卷管理的简称。它是Linux环境下对磁盘分区管理的一种机制。对于其他的的UNIX（AIX&#x2F;HP&#x2F;SUM)操作系统，以及Windows系统也有类似的磁盘管理软件。</p><p>LVM管理的方式非常简单，就是通过将底层的物料磁盘抽象并封装起来，然后以逻辑的方式呈现给上层应用。</p><p>首先需要对磁盘分区，再把一个或多个磁盘分区加入pv</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 刷新硬件信息</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># partprobe</span></span><br><span class="line"><span class="comment">## 查看磁盘情况</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># lsblk</span></span><br><span class="line"><span class="comment">##新建分区</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># fdisk /dev/vda</span></span><br><span class="line">Welcome to fdisk (util-linux 2.23.2).</span><br><span class="line"><span class="comment">##创建分区</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n</span><br><span class="line">Partition <span class="built_in">type</span>:</span><br><span class="line">   p   primary (1 primary, 0 extended, 3 free)</span><br><span class="line">   e   extended</span><br><span class="line">Select (default p): p</span><br><span class="line">Partition number (2-4, default 2): 2</span><br><span class="line">First sector (16779264-209715199, default 16779264):</span><br><span class="line">Using default value 16779264</span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G&#125; (16779264-209715199, default 209715199):</span><br><span class="line">Using default value 209715199</span><br><span class="line">Partition 2 of <span class="built_in">type</span> Linux and of size 92 GiB is <span class="built_in">set</span></span><br><span class="line"><span class="comment">## 再次查看分区</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): p</span><br><span class="line"></span><br><span class="line">Disk /dev/vda: 107.4 GB, 107374182400 bytes, 209715200 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk label <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x000504a5</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/vda1            2048    16779263     8388608   82  Linux swap / Solaris</span><br><span class="line">/dev/vda2        16779264   209715199    96467968   83  Linux</span><br><span class="line"><span class="comment">## 检查分区是不否有错误</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): v</span><br><span class="line">Remaining 2047 unallocated 512-byte sectors</span><br><span class="line"><span class="comment">## 保存分区信息</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): w</span><br><span class="line">The partition table has been altered!</span><br><span class="line"></span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line"><span class="comment">## 刷新存储文件，centos6 使用 kpartx /dev/vda</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># partprobe</span></span><br><span class="line"><span class="comment">##创建pv卷</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># pvcreate /dev/vda2</span></span><br><span class="line"><span class="comment">##创建vg卷组</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># vgcreate data /dev/vda2</span></span><br><span class="line"><span class="comment">##创建lv逻辑卷</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># lvcreate -l 100%FREE -n data data</span></span><br><span class="line"><span class="comment">##格式化逻辑卷</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># mkfs.xfs /dev/mapper/data-data</span></span><br><span class="line"><span class="comment">##修改fstab并挂载</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># vim /etc/fstab</span></span><br><span class="line">/dev/mapper/data-data    /data   xfs     defaults   0 0</span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># mount -a</span></span><br><span class="line"><span class="comment">##查看分区挂载</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># df -Th</span></span><br></pre></td></tr></table></figure><hr><p><strong>相关链接</strong></p><ul><li><a href="https://baize.cc/posts/fa9f.html">Linux存储扩容，分区扩容</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x01-查看系统磁盘&quot;&gt;&lt;a href=&quot;#0x01-查看系统磁盘&quot; class=&quot;headerlink&quot; title=&quot;0x01 查看系统磁盘&quot;&gt;&lt;/a&gt;0x01 查看系统磁盘&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;lsblk&lt;/code&gt;可查看分区情况与磁盘大小，使</summary>
      
    
    
    
    <category term="操作系统" scheme="https://aisk.cc/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="CentOS" scheme="https://aisk.cc/tags/CentOS/"/>
    
    <category term="Linux" scheme="https://aisk.cc/tags/Linux/"/>
    
    <category term="Ubuntu" scheme="https://aisk.cc/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Redis6.0.10编译安装配置</title>
    <link href="https://aisk.cc/posts/1c3a.html"/>
    <id>https://aisk.cc/posts/1c3a.html</id>
    <published>2021-02-10T03:00:00.000Z</published>
    <updated>2024-01-19T14:47:41.645Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-下载Redis"><a href="#0x01-下载Redis" class="headerlink" title="0x01 下载Redis"></a>0x01 下载Redis</h3><p>直接登录官网下载你需要的版本<a href="https://redis.io/">https://redis.io/</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装编译依赖gc++</span></span><br><span class="line">$ sudo yum install gcc-c++</span><br><span class="line"><span class="comment">#下载、编译、安装redis</span></span><br><span class="line">$ wget http://download.redis.io/releases/redis-6.0.10.tar.gz</span><br><span class="line">$ tar xzf redis-6.0.10.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> redis-6.0.10</span><br></pre></td></tr></table></figure><h3 id="0x02-安装编译"><a href="#0x02-安装编译" class="headerlink" title="0x02 安装编译"></a>0x02 安装编译</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -p /usr/local/redis</span><br><span class="line"><span class="comment">#编译包并安装到指定目录</span></span><br><span class="line">$ make PREFIX=/usr/local/redis install</span><br><span class="line"><span class="comment">#启动服务</span></span><br><span class="line">$ src/redis-server</span><br><span class="line"><span class="comment">#运行shell 及 基本操作</span></span><br><span class="line">$ src/redis-cli</span><br><span class="line">redis&gt; <span class="built_in">set</span> foo bar</span><br><span class="line">OK</span><br><span class="line">redis&gt; get foo</span><br><span class="line"><span class="string">&quot;bar&quot;</span></span><br></pre></td></tr></table></figure><p>编译后文件</p><p>redis-benchmark（压力测试工具）、redis-check-aof（检查.aof文件完整性的工具）、redis-check-rdb（检查数据文件完整性的工具）、redis-sentinel（监控集群运行状态）、redis-server（服务端）、redis-cli（客户端）</p><h3 id="0x03-编译出错"><a href="#0x03-编译出错" class="headerlink" title="0x03 编译出错"></a>0x03 编译出错</h3><p><img src="https://s11.ax1x.com/2024/01/15/pFi7waq.png" alt="编译出错"></p><p>这时我们需要检查 gcc 版本</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gcc -v</span><br></pre></td></tr></table></figure><p>配置scl源，升级版本：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">##安装scl源，修改官方源地址</span></span><br><span class="line">yum -y install centos-release-scl</span><br><span class="line">vim CentOS-SCLo-scl-rh.repo</span><br><span class="line">vim CentOS-SCLo-scl.repo</span><br><span class="line"><span class="comment">##安装新版gcc</span></span><br><span class="line">yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils</span><br><span class="line">scl <span class="built_in">enable</span> devtoolset-9 bash</span><br><span class="line"><span class="comment">##永久生效</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /opt/rh/devtoolset-9/enable&quot;</span> &gt;&gt;/etc/profile</span><br><span class="line">yum install tcl -y</span><br></pre></td></tr></table></figure><h3 id="0x04-修改配置文件"><a href="#0x04-修改配置文件" class="headerlink" title="0x04 修改配置文件"></a>0x04 修改配置文件</h3><p>编辑”&#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;redis”文件，做以下几处修改</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi redis.conf</span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"><span class="comment"># chkconfig: 2345 90 10</span></span><br><span class="line"><span class="comment"># description: Start And Stop Redis</span></span><br><span class="line"></span><br><span class="line">protected-mode no <span class="comment"># 关闭保护模式,不然远程还是连接不了</span></span><br><span class="line">daemonize <span class="built_in">yes</span>     <span class="comment"># 守护进程模式开启,设为后台运行</span></span><br><span class="line"><span class="built_in">bind</span> 127.0.0.1    <span class="comment"># 绑定IP按需修改</span></span><br><span class="line">port 6379         <span class="comment"># 端口按需修改</span></span><br></pre></td></tr></table></figure><p>启动 Redis服务端</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/redis/bin/</span><br><span class="line">./redis-server /usr/local/redis/redis.conf</span><br></pre></td></tr></table></figure><p>查看监听</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep redis</span><br></pre></td></tr></table></figure><p>启动Redis客户端</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./redis-cli</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> hello word</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get hello</span><br><span class="line"><span class="string">&quot;word&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>关闭Redis服务 查看监听已经关闭</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./redis-cli shutdown</span><br><span class="line">ps -ef | grep redis</span><br></pre></td></tr></table></figure><p>设置开机自动启动Redis服务。首先复制启动脚本到资源目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> /root/redis-6.0.10/utils/redis_init_script /etc/rc.d/init.d/redis</span><br></pre></td></tr></table></figure><p>修改启动脚本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 755 /etc/rc.d/init.d/redis</span><br><span class="line"><span class="comment">##然后将Redis服务加入到系统服务</span></span><br><span class="line">chkconfig --add redis</span><br><span class="line"><span class="comment">##最后检查Redis服务设置是否已经生效</span></span><br><span class="line">chkconfig --list redis</span><br></pre></td></tr></table></figure><p>现在就可以使用service命令来启动和停止Redis服务了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status redis.service</span><br><span class="line">systemctl start redis.service</span><br><span class="line">systemctl stop redis.service</span><br></pre></td></tr></table></figure><p>防火墙中放通端口</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=6379/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br><span class="line"><span class="comment">##查看端口是否放通</span></span><br><span class="line">firewall-cmd --list-ports </span><br></pre></td></tr></table></figure><p>至此Redis安装完毕</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;0x01-下载Redis&quot;&gt;&lt;a href=&quot;#0x01-下载Redis&quot; class=&quot;headerlink&quot; title=&quot;0x01 下载Redis&quot;&gt;&lt;/a&gt;0x01 下载Redis&lt;/h3&gt;&lt;p&gt;直接登录官网下载你需要的版本&lt;a href=&quot;https:/</summary>
      
    
    
    
    <category term="系统配置" scheme="https://aisk.cc/categories/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="CentOS" scheme="https://aisk.cc/tags/CentOS/"/>
    
    <category term="Redis" scheme="https://aisk.cc/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Hexo版本升级指南</title>
    <link href="https://aisk.cc/posts/15ac.html"/>
    <id>https://aisk.cc/posts/15ac.html</id>
    <published>2021-02-09T03:00:00.000Z</published>
    <updated>2023-04-02T12:32:46.050Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>更换了新主题，在hexo g和hexo s的时候总会报如下错误，在主题github issues逛了一圈后，感觉应该是我的hexo版本太老了。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜ hexo s</span><br><span class="line">(node:64285) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.</span><br><span class="line">INFO  Start processing</span><br><span class="line">ERROR Process failed: layout/archive.ejs</span><br><span class="line">SyntaxError: Invalid or unexpected token in &quot;/Users/lanvnal/Files/blog/themes/hexo-theme-matery/layout/archive.ejs&quot;</span><br><span class="line">    at new Function (&lt;anonymous&gt;)</span><br><span class="line">    at Object.exports.compile (/Users/lanvnal/Files/blog/node_modules/ejs/lib/ejs.js:242:14)</span><br><span class="line">    at Function.ejsRenderer.compile (/Users/lanvnal/Files/blog/node_modules/hexo-renderer-ejs/lib/renderer.js:11:14)</span><br><span class="line">    at Theme._View.View.View._precompile (/Users/lanvnal/Files/blog/node_modules/hexo/lib/theme/view.js:117:31)</span><br></pre></td></tr></table></figure><p>决定升级hexo版本，但是没找到很明确的升级hexo的文章，遂做一下记录。</p><h2 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h2><p>1、全局升级hexo-cli，先<code>hexo version</code>查看当前版本，然后<code>npm i hexo-cli -g</code>，再次<code>hexo version</code>查看是否升级成功。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i hexo-cli -g</span><br><span class="line">npm update</span><br><span class="line">hexo version</span><br></pre></td></tr></table></figure><p>2、使用<code>npm install -g npm-check</code>和<code>npm-check</code>，检查系统中的插件是否有升级的，可以看到自己前面都安装了那些插件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g npm-check</span><br><span class="line">npm-check</span><br></pre></td></tr></table></figure><p>3、使用<code>npm install -g npm-upgrade</code>和<code>npm-upgrade</code>，升级系统中的插件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g npm-upgrade</span><br><span class="line">npm-upgrade</span><br></pre></td></tr></table></figure><p>4、使用<code>npm update -g</code>和<code>npm update --save</code></p><p>更新全局包与更新生产环境依赖包</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm update &lt;name&gt; -g</span><br><span class="line"></span><br><span class="line">npm update &lt;name&gt; --save</span><br></pre></td></tr></table></figure><p>save参数：<code>npm install X –save</code>:</p><ul><li><p>会把X包安装到<code>node_modules</code>目录中</p></li><li><p>会在<code>package.json</code>的dependencies属性下添加X</p></li><li><p>之后运行<code>npm install</code>命令时，会自动安装X到node_modules目录中</p></li></ul><p>如果不加save参数的话，之后把X包安装到node_modules目录中，不会添加到dependencies文件中。再查看hexo文件夹下面的dependencies文件,可以看到hexo的版本已经更新了。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;hexo-site&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;hexo&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;3.7.1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;hexo&quot;</span>: <span class="string">&quot;^3.7.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-deployer-git&quot;</span>: <span class="string">&quot;^0.3.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-fs&quot;</span>: <span class="string">&quot;^0.2.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-generator-archive&quot;</span>: <span class="string">&quot;^0.1.5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-generator-category&quot;</span>: <span class="string">&quot;^0.1.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-generator-index&quot;</span>: <span class="string">&quot;^0.2.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-generator-tag&quot;</span>: <span class="string">&quot;^0.2.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-renderer-ejs&quot;</span>: <span class="string">&quot;^0.3.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-renderer-marked&quot;</span>: <span class="string">&quot;^0.3.2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-renderer-stylus&quot;</span>: <span class="string">&quot;^0.3.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-server&quot;</span>: <span class="string">&quot;^0.3.2&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS：第四步遇到了错误，错误提示如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">fsevents@1.2.11 install /Users/lanvnal/Files/blog/node_modules/hexo/node_modules/fsevents</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">node-gyp rebuild</span></span><br><span class="line"></span><br><span class="line">xcode-select: error: tool &#x27;xcodebuild&#x27; requires Xcode, but active developer directory &#x27;/Library/Developer/CommandLineTools&#x27; is a command line tools instance</span><br><span class="line"></span><br><span class="line">xcode-select: error: tool &#x27;xcodebuild&#x27; requires Xcode, but active developer directory &#x27;/Library/Developer/CommandLineTools&#x27; is a command line tools instance</span><br><span class="line"></span><br><span class="line">No receipt for &#x27;com.apple.pkg.CLTools_Executables&#x27; found at &#x27;/&#x27;.</span><br><span class="line"></span><br><span class="line">No receipt for &#x27;com.apple.pkg.DeveloperToolsCLILeo&#x27; found at &#x27;/&#x27;.</span><br><span class="line"></span><br><span class="line">No receipt for &#x27;com.apple.pkg.DeveloperToolsCLI&#x27; found at &#x27;/&#x27;.</span><br><span class="line">gyp: No Xcode or CLT version detected!</span><br></pre></td></tr></table></figure><p>其实已经安装过了xcode cli，但是这里还是报错了，估计和苹果新系统有关，重装就好了，操作如下：</p><p>如果像以前一样执行<code>xcode-select --install</code>会有如下报错：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xcode-select: error: <span class="built_in">command</span> line tools are already installed, use <span class="string">&quot;Software Update&quot;</span> to install updates</span><br></pre></td></tr></table></figure><p>解决办法：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rm -rf /Library/Developer/CommandLineTools</span><br><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure><p>然后再执行第四步，完美升级。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;更换了新主题，在hexo g和hexo s的时候总会报如下错误，在主题github issues逛了一圈后，感觉应该是我的hexo版本太老了</summary>
      
    
    
    
    <category term="网站优化" scheme="https://aisk.cc/categories/%E7%BD%91%E7%AB%99%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="npm" scheme="https://aisk.cc/tags/npm/"/>
    
    <category term="hexo" scheme="https://aisk.cc/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Centos7双网卡绑定配置 bonding</title>
    <link href="https://aisk.cc/posts/e3a7.html"/>
    <id>https://aisk.cc/posts/e3a7.html</id>
    <published>2020-09-29T05:00:00.000Z</published>
    <updated>2023-04-02T12:32:46.050Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h2><p>当linux系统上有多个单独网卡，又想充分利用这些网卡，同时对外提供一个统一的网络地址，以使得增大网络的吞吐量，同时也提高网络的可用性，这时就需要bond来帮助我们解决这个问题。</p><p>Linux网卡绑定mode共有七种(0~6) bond0、bond1、bond2、bond3、bond4、bond5、bond6，接下来我们一起简单看下这7中模式的工作原理概述。</p><h3 id="bond几种主要模式介绍"><a href="#bond几种主要模式介绍" class="headerlink" title="bond几种主要模式介绍"></a>bond几种主要模式介绍</h3><ul><li>第一种模式：mod&#x3D;0 ，即：(balance-rr) Round-robin policy（平衡抡循环策略）</li></ul><p>bond0工作原理：</p><p>传输数据包顺序是依次传输（即：第1个包走eth0，下一个包就走eth1….一直循环下去，直到最后一个传输完毕），此模式提供负载平衡和容错能力；但是我们知道如果一个连接或者会话的数据包从不同的接口发出的话，中途再经过不同的链路，在客户端很有可能会出现数据包无序到达的问题，而无序到达的数据包需要重新要求被发送，这样网络的吞吐量就会下降</p><blockquote><p>特点：有高可用 (容错) 和负载均衡的功能, 需要交换机的配置，每块网卡轮询发包 (流量分发比较均衡).</p></blockquote><ul><li>第二种模式：mod&#x3D;1，即： (active-backup) Active-backup policy（主-备份策略）</li></ul><p>bond1工作原理：</p><p>只有一个设备处于活动状态，当一个宕掉另一个马上由备份转换为主设备。mac地址是外部可见得，从外面看来，bond的MAC地址是唯一的，以避免switch(交换机)发生混乱。此模式只提供了容错能力；由此可见此算法的优点是可以提供高网络连接的可用性，但是它的资源利用率较低，只有一个接口处于工作状态，在有N个网络接口的情况下，资源利用率为1&#x2F;N</p><blockquote><p>特点：只有高可用 (容错) 功能, 不需要交换机配置, 这种模式只有一块网卡工作, 对外只有一个mac地址。缺点是端口利用率比较低</p></blockquote><ul><li>第三种模式：mod&#x3D;2，即：(balance-xor) XOR policy（平衡策略）</li></ul><p>bond2工作原理：</p><p>基于指定的传输HASH策略传输数据包。缺省的策略是：(源MAC地址 XOR 目标MAC地址) % slave数量。其他的传输策略可以通过xmit_hash_policy选项指定，此模式提供负载平衡和容错能力</p><blockquote><p>特点：基于指定的传输HASH策略传输数据包。缺省的策略是：(源MAC地址 XOR 目标MAC地址) % slave数量。其他的传输策略可以通过xmit_hash_policy选项指定，此模式提供负载平衡和容错能力，但不常用</p></blockquote><ul><li>第四种模式：mod&#x3D;3，即：broadcast（广播策略）</li></ul><p>bond3工作原理：</p><p>在每个slave接口上传输每个数据包，此模式提供了容错能力。</p><blockquote><p> 特点：在每个slave接口上传输每个数据包，此模式提供了容错能力，不常用</p></blockquote><ul><li>第五种模式：mod&#x3D;4，即：(802.3ad) IEEE 802.3ad Dynamic link aggregation（IEEE 802.3ad 动态链接聚合）</li></ul><p>bond4工作原理：</p><p>创建一个聚合组，它们共享同样的速率和双工设定。根据802.3ad规范将多个slave工作在同一个激活的聚合体下。外出流量的slave选举是基于传输hash策略，该策略可以通过xmit_hash_policy选项从缺省的XOR策略改变到其他策略。需要注意的是，并不是所有的传输策略都是802.3ad适应的，尤其考虑到在802.3ad标准43.2.4章节提及的包乱序问题。不同的实现可能会有不同的适应性。</p><p><em>必要条件：</em></p><ul><li>条件1：ethtool支持获取每个slave的速率和双工设定</li><li>条件2：switch(交换机)支持IEEE 802.3ad Dynamic link aggregation</li><li>条件3：大多数switch(交换机)需要经过特定配置才能支持802.3ad模式</li></ul><blockquote><p>特点： IEEE 802.3ad 动态链路聚合，需要交换机支持与配置交换机</p></blockquote><ul><li>第六种模式：mod&#x3D;5，即：(balance-tlb) Adaptive transmit load balancing（适配器传输负载均衡）</li></ul><p>bond5工作原理：</p><p>不需要任何特别的switch(交换机)支持的通道bonding。在每个slave上根据当前的负载（根据速度计算）分配外出流量。如果正在接受数据的slave出故障了，另一个slave接管失败的slave的MAC地址。</p><p>该模式的必要条件：ethtool支持获取每个slave的速率</p><blockquote><p>特点：该模式的必要条件：ethtool支持获取每个slave的速率。不常用</p></blockquote><ul><li>第七种模式：mod&#x3D;6，即：(balance-alb) Adaptive load balancing（适配器适应性负载均衡）</li></ul><p>bond6工作原理：</p><p>该模式包含了balance-tlb模式，同时加上针对IPV4流量的接收负载均衡(receive load balance, rlb)，而且不需要任何switch(交换机)的支持。接收负载均衡是通过ARP协商实现的。bonding驱动截获本机发送的ARP应答，并把源硬件地址改写为bond中某个slave的唯一硬件地址，从而使得不同的对端使用不同的硬件地址进行通信。</p><p>来自服务器端的接收流量也会被均衡。当本机发送ARP请求时，bonding驱动把对端的IP信息从ARP包中复制并保存下来。当ARP应答从对端到达时，bonding驱动把它的硬件地址提取出来，并发起一个ARP应答给bond中的某个slave。使用ARP协商进行负载均衡的一个问题是：每次广播ARP请求时都会使用bond的硬件地址，因此对端学习到这个硬件地址后，接收流量将会全部流向当前的slave。这个问题可以通过给所有的对端发送更新 （ARP应答）来解决，应答中包含他们独一无二的硬件地址，从而导致流量重新分布。当新的slave加入到bond中时，或者某个未激活的slave重新 激活时，接收流量也要重新分布。接收的负载被顺序地分布（round robin）在bond中最高速的slave上</p><p>当某个链路被重新接上，或者一个新的slave加入到bond中，接收流量在所有当前激活的slave中全部重新分配，通过使用指定的MAC地址给每个 client发起ARP应答。</p><p>下面介绍的updelay参数必须被设置为某个大于等于switch(交换机)转发延时的值，从而保证发往对端的ARP应答不会被switch(交换机)阻截。</p><p><em>必要条件：</em></p><ul><li>条件1：ethtool支持获取每个slave的速率；</li><li>条件2：底层驱动支持设置某个设备的硬件地址，从而使得总是有个slave(curr_active_slave)使用bond的硬件地址，同时保证每个bond 中的slave都有一个唯一的硬件地址。如果curr_active_slave出故障，它的硬件地址将会被新选出来的 curr_active_slave接管</li></ul><p>其实mod&#x3D;6与mod&#x3D;0的区别：mod&#x3D;6，先把eth0流量占满，再占eth1，….ethX；而mod&#x3D;0的话，会发现2个口的流量都很稳定，基本一样的带宽。而mod&#x3D;6，会发现第一个口流量很高，第2个口只占了小部分流量。</p><blockquote><p>特点：有高可用 ( 容错 )和负载均衡的功能，不需要交换机配置 (流量分发到每个接口不是特别均衡)<br>服务器上两张物理网卡em1和em2, 通过绑定成一个逻辑网卡bond0。</p></blockquote><p>注: ip地址配置在bond0上, 物理网卡不需要配置ip地址。</p><h2 id="0x02-手动配置bond"><a href="#0x02-手动配置bond" class="headerlink" title="0x02 手动配置bond"></a>0x02 手动配置bond</h2><h3 id="关闭和停止NetworkManager服务"><a href="#关闭和停止NetworkManager服务" class="headerlink" title="关闭和停止NetworkManager服务"></a>关闭和停止NetworkManager服务</h3><p>一定要关闭，不关会对做bonding有干扰</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop NetworkManager.service</span><br><span class="line"><span class="comment"># 停止NetworkManager服务</span></span><br><span class="line">systemctl <span class="built_in">disable</span> NetworkManager.service</span><br><span class="line"><span class="comment"># 禁止开机启动NetworkManager服务</span></span><br></pre></td></tr></table></figure><h3 id="加载bonding模块"><a href="#加载bonding模块" class="headerlink" title="加载bonding模块"></a>加载bonding模块</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">modprobe --first-time bonding</span><br></pre></td></tr></table></figure><p>没有提示说明加载成功, 如果出现 modprobe: ERROR: could not insert ‘bonding’: Module already in kernel 说明你已经加载了这个模块, 就不用管了</p><p>你也可以使用<code>lsmod | grep bonding</code>查看模块是否被加载</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsmod | grep bonding</span><br><span class="line">bonding 136705 0</span><br></pre></td></tr></table></figure><h3 id="创建基于bond0接口的配置文件"><a href="#创建基于bond0接口的配置文件" class="headerlink" title="创建基于bond0接口的配置文件"></a>创建基于bond0接口的配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/sysconfig/network-scripts/ifcfg-bond0</span><br><span class="line"><span class="comment">#修改成如下，根据你的情况:</span></span><br><span class="line">DEVICE=bond0</span><br><span class="line">TYPE=Bond</span><br><span class="line">IPADDR=172.16.0.183</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=172.16.0.1</span><br><span class="line">DNS1=114.114.114.114</span><br><span class="line">USERCTL=no</span><br><span class="line">BOOTPROTO=none</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line">BONDING_MASTER=<span class="built_in">yes</span></span><br><span class="line">BONDING_OPTS=<span class="string">&quot;miimon=100 mode=4 xmit_hash_policy=layer3+4&quot;</span></span><br><span class="line"><span class="comment">#上面这个参数如已配置mode在系统文件中可注释</span></span><br></pre></td></tr></table></figure><h3 id="将需求mode配置在系统文件中"><a href="#将需求mode配置在系统文件中" class="headerlink" title="将需求mode配置在系统文件中"></a>将需求mode配置在系统文件中</h3><p>如在bond0接口上已配置不再须要配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/modprobe.d/bond.conf</span><br><span class="line"><span class="comment">#添加以下内容：</span></span><br><span class="line"><span class="built_in">alias</span> bond0 bonding</span><br><span class="line">options bond0 miimon=100 mode=4 xmit_hash_policy=layer3+4</span><br></pre></td></tr></table></figure><h3 id="修改em1接口的配置文件"><a href="#修改em1接口的配置文件" class="headerlink" title="修改em1接口的配置文件"></a>修改em1接口的配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-em1</span><br><span class="line"><span class="comment">#修改成如下:</span></span><br><span class="line">DEVICE=em1</span><br><span class="line">USERCTL=no</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line">MASTER=bond0</span><br><span class="line"><span class="comment"># 需要和上面的ifcfg-bond0配置文件中的DEVICE的值对应</span></span><br><span class="line">SLAVE=<span class="built_in">yes</span></span><br><span class="line">BOOTPROTO=none</span><br></pre></td></tr></table></figure><h3 id="修改em2接口的配置文件"><a href="#修改em2接口的配置文件" class="headerlink" title="修改em2接口的配置文件"></a>修改em2接口的配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-em2</span><br><span class="line"><span class="comment">#修改成如下:</span></span><br><span class="line">DEVICE=em2</span><br><span class="line">USERCTL=no</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line">MASTER=bond0</span><br><span class="line"><span class="comment"># 与 ifcfg-bond0 配置文件中的DEVICE的值对应</span></span><br><span class="line">SLAVE=<span class="built_in">yes</span></span><br><span class="line">BOOTPROTO=none</span><br></pre></td></tr></table></figure><h2 id="0x03-nmcli命令配置"><a href="#0x03-nmcli命令配置" class="headerlink" title="0x03 nmcli命令配置"></a>0x03 nmcli命令配置</h2><p>使用 nmcli 命令配置时需要启动 NetworkManager 服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">##查看网卡信息</span></span><br><span class="line">nmcli connection show</span><br><span class="line"><span class="comment">##配置bond0链路聚合为主从模式</span></span><br><span class="line">nmcli connection add <span class="built_in">type</span> bond con-name bond0 ifname bond0 bond.options <span class="string">&quot;mode=active-backup,miimon=100&quot;</span></span><br><span class="line"><span class="comment">##配置bond0网卡地址</span></span><br><span class="line">nmcli connection modify bond0 ipv4.method manual ipv4.addresses <span class="string">&#x27;172.16.0.183/24&#x27;</span> ipv4.gateway <span class="string">&#x27;172.16.0.254&#x27;</span></span><br><span class="line"><span class="comment">##刷新网络</span></span><br><span class="line">nmcli connection reload</span><br><span class="line"><span class="comment">##添加网络到绑定网络，其中 enp3s0f0 按情况变更</span></span><br><span class="line">nmcli connection add <span class="built_in">type</span> bond-slave ifname enp3s0f0 master bond0</span><br><span class="line">nmcli connection add <span class="built_in">type</span> bond-slave ifname enp3s0f1 master bond0</span><br><span class="line"><span class="comment">##启动网络</span></span><br><span class="line">nmcli connection up  bond0</span><br></pre></td></tr></table></figure><h2 id="0x04-测试"><a href="#0x04-测试" class="headerlink" title="0x04 测试"></a>0x04 测试</h2><p>重启网络服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart network</span><br><span class="line">ifconfig</span><br><span class="line"><span class="comment">#查看网络是否正常，其中bond0接口mac地址与em1等接口相同</span></span><br><span class="line">ifconfig em1 down</span><br><span class="line"><span class="comment">#关闭一个接口查看网络是否正常</span></span><br><span class="line"><span class="built_in">cat</span> /proc/net/bonding/bond0</span><br><span class="line"><span class="comment">#查看网卡状态</span></span><br><span class="line">ethtool bond0</span><br><span class="line"><span class="comment">#查看速率命令</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x01-简介&quot;&gt;&lt;a href=&quot;#0x01-简介&quot; class=&quot;headerlink&quot; title=&quot;0x01 简介&quot;&gt;&lt;/a&gt;0x01 简介&lt;/h2&gt;&lt;p&gt;当linux系统上有多个单独网卡，又想充分利用这些网卡，同时对外提供一个统一的网络地址，以使得增大网</summary>
      
    
    
    
    <category term="系统配置" scheme="https://aisk.cc/categories/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="CentOS" scheme="https://aisk.cc/tags/CentOS/"/>
    
    <category term="Linux" scheme="https://aisk.cc/tags/Linux/"/>
    
    <category term="Ubuntu" scheme="https://aisk.cc/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>linux主机加固</title>
    <link href="https://aisk.cc/posts/ebe6.html"/>
    <id>https://aisk.cc/posts/ebe6.html</id>
    <published>2020-09-28T03:00:00.000Z</published>
    <updated>2023-04-02T12:32:46.050Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-前-言"><a href="#0x01-前-言" class="headerlink" title="0x01 前 言"></a>0x01 前 言</h2><p>Linux系统被应用于大部分企业的服务器上，因此在等保测评中主机加固也是必须要完成的一项环节。<br>由于在之后项目开始要进行主机加固，因此对linux的加固流程进行总结学习。<br>Linux的主机加固主要分为：账号安全、认证授权、协议安全、审计安全。简而言之，就是4A（统一安全管理平台解决方案）。</p><p>这边就使用我自己kali的虚拟机进行试验学习。</p><h2 id="0x02-基础加固"><a href="#0x02-基础加固" class="headerlink" title="0x02 基础加固"></a>0x02 基础加固</h2><h3 id="口令生存期"><a href="#口令生存期" class="headerlink" title="口令生存期"></a>口令生存期</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gedit /etc/login.defs</span><br><span class="line"><span class="comment">#在此处对密码的长度、时间、过期警告进行修改</span></span><br><span class="line">PASS_MAX_DAYS   90  <span class="comment">#密码最长过期天数</span></span><br><span class="line">PASS_MIN_DAYS   10   <span class="comment">#密码最小过期天数</span></span><br><span class="line">PASS_WARN_AGE   7   <span class="comment">#密码过期警告天数</span></span><br><span class="line">如果修改设置有最小长度也需要修改</span><br><span class="line">PASS_MIN_LEN    8   <span class="comment">#密码最小长度</span></span><br></pre></td></tr></table></figure><h3 id="口令复杂度（很重要）"><a href="#口令复杂度（很重要）" class="headerlink" title="口令复杂度（很重要）"></a>口令复杂度（很重要）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/pam.d/system-auth</span><br><span class="line"><span class="comment">#在文件中找到 password requisite  pam_cracklib.so</span></span><br><span class="line"><span class="comment">#将其修改为:</span></span><br><span class="line">password requisite  pam_cracklib.so try_first_pass retry=3 dcredit=-1 lcredit=-1 ucredit=-1 ocredit=-1 minlen=8</span><br></pre></td></tr></table></figure><p>备注：至少包含一个数字、一个小写字母、一个大写字母、一个特殊字符、且密码长度&gt;&#x3D;8</p><h3 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /proc/version</span><br></pre></td></tr></table></figure><h3 id="限制xx用户登录"><a href="#限制xx用户登录" class="headerlink" title="限制xx用户登录"></a>限制xx用户登录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts.deny</span><br><span class="line"><span class="comment">#添加内容：</span></span><br><span class="line">sshd : 192.168.1.1</span><br><span class="line"><span class="comment">#禁止192.168.1.1对服务器进行ssh的登陆</span></span><br></pre></td></tr></table></figure><h3 id="检查是否有其他uid-0的用户"><a href="#检查是否有其他uid-0的用户" class="headerlink" title="检查是否有其他uid&#x3D;0的用户"></a>检查是否有其他uid&#x3D;0的用户</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk -F “：” <span class="string">&#x27;($3==0)  &#123;print  $1&#125; &#x27;</span> /etc/passwd</span><br></pre></td></tr></table></figure><h3 id="登陆超时限制"><a href="#登陆超时限制" class="headerlink" title="登陆超时限制"></a>登陆超时限制</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> -p /etc/profile /etc/profile_bak <span class="comment">#（备份）</span></span><br><span class="line">gedit /etc/profile</span><br><span class="line"><span class="comment">#增加</span></span><br><span class="line">TMOUT=300</span><br><span class="line"><span class="built_in">export</span> TMOUT</span><br><span class="line"></span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export TMOUT=300&#x27;</span>&gt;&gt;/etc/profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;readonly TMOUT&#x27;</span> &gt;&gt;/etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h3 id="检查是否使用PAM认证模块禁止wheel组之外的用户su为root"><a href="#检查是否使用PAM认证模块禁止wheel组之外的用户su为root" class="headerlink" title="检查是否使用PAM认证模块禁止wheel组之外的用户su为root"></a>检查是否使用PAM认证模块禁止wheel组之外的用户su为root</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gedit /etc/pam.d/su</span><br><span class="line"><span class="comment">#新增</span></span><br><span class="line">auth          sufficient     pam_rootok.so</span><br><span class="line">auth          required     pam_wheel.so use_uid</span><br></pre></td></tr></table></figure><p>备注：auth与sufficient之间由两个tab建隔开，sufficient与动态库路径之间使用一个tab建隔开</p><h3 id="禁用无用账户"><a href="#禁用无用账户" class="headerlink" title="禁用无用账户"></a>禁用无用账户</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/passwd <span class="comment">#查看口令文件，确认不必要的账号。</span></span><br><span class="line"></span><br><span class="line">passwd -l user <span class="comment"># 锁定不必要的账号</span></span><br></pre></td></tr></table></figure><h3 id="账户锁定"><a href="#账户锁定" class="headerlink" title="账户锁定"></a>账户锁定</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gedit /etc/pam.d/system-auth</span><br><span class="line"><span class="comment">#在文件中修改或者添加</span></span><br><span class="line">auth required pam_tally.so onerr=fail deny=3 unlock_time=7200</span><br><span class="line"></span><br><span class="line"><span class="comment">#锁定账户举例：</span></span><br><span class="line">passwd -l bin</span><br><span class="line">passwd -l sys</span><br><span class="line">passwd -l adm</span><br></pre></td></tr></table></figure><h3 id="检查系统弱口令"><a href="#检查系统弱口令" class="headerlink" title="检查系统弱口令"></a>检查系统弱口令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">john /etc/shadow --single</span><br><span class="line">john /etc/shadow --wordlist=pass.dic</span><br></pre></td></tr></table></figure><p>我这边有报错 就不展示了<br>使用passwd 用户 命令为用户设置复杂的密码</p><h2 id="0x03-软件协议安全"><a href="#0x03-软件协议安全" class="headerlink" title="0x03 软件协议安全"></a>0x03 软件协议安全</h2><h3 id="openssh升级（按需做）"><a href="#openssh升级（按需做）" class="headerlink" title="openssh升级（按需做）"></a>openssh升级（按需做）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum update  openssh</span><br></pre></td></tr></table></figure><h3 id="定时任务（防止病毒感染）"><a href="#定时任务（防止病毒感染）" class="headerlink" title="定时任务（防止病毒感染）"></a>定时任务（防止病毒感染）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定时任务检查：</span></span><br><span class="line">crontab -l</span><br><span class="line"></span><br><span class="line"><span class="comment">#一次性任务检查：</span></span><br><span class="line">at -l</span><br></pre></td></tr></table></figure><h3 id="限制ssh登录（看是否需要）"><a href="#限制ssh登录（看是否需要）" class="headerlink" title="限制ssh登录（看是否需要）"></a>限制ssh登录（看是否需要）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line"><span class="comment">#查看PermitRootLogin是否为no</span></span><br><span class="line">PermitRootLogin no <span class="comment">#不允许root登陆</span></span><br><span class="line">Protocol 2 <span class="comment">#修改ssh使用的协议版本</span></span><br><span class="line">MaxAuthTries 3 <span class="comment">#修改允许密码错误次数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;tty1&quot;</span> &gt; /etc/securetty</span><br><span class="line">hmod 700 /root</span><br></pre></td></tr></table></figure><h3 id="限制su为root用户"><a href="#限制su为root用户" class="headerlink" title="限制su为root用户"></a>限制su为root用户</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gedit /etc/pam.d/su</span><br><span class="line"><span class="comment">#在头部添加</span></span><br><span class="line">auth required /lib/security/pam_wheel.so group=wheel</span><br></pre></td></tr></table></figure><h3 id="禁止root用户登录ftp"><a href="#禁止root用户登录ftp" class="headerlink" title="禁止root用户登录ftp"></a>禁止root用户登录ftp</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#因为我的kali下没有这个文件，因此借鉴一下网上的</span></span><br><span class="line"><span class="built_in">cat</span> /etc/pam.d/vsftpd</span><br><span class="line">Auth required pam_listfile.so item=user sense=deny file=/etc/vsftpd/ftpusers onerr=succeed</span><br><span class="line"><span class="comment">#其中file=/etc/vsftpd/ftpusers即为当前系统上的ftpusers文件.</span></span><br><span class="line"><span class="built_in">echo</span>  “root”   &gt;&gt;   /etc/vsftpd/ftpusers</span><br></pre></td></tr></table></figure><h3 id="防止flood攻击"><a href="#防止flood攻击" class="headerlink" title="防止flood攻击"></a>防止flood攻击</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gedit  /etc/sysctl.conf</span><br><span class="line"><span class="comment">#增加</span></span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">sysctl  -p</span><br></pre></td></tr></table></figure><h3 id="禁ping"><a href="#禁ping" class="headerlink" title="禁ping"></a>禁ping</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> 0 &gt; /proc/sys/net/ipv4/icmp_echo_igore_all</span><br></pre></td></tr></table></figure><h3 id="检查异常进程"><a href="#检查异常进程" class="headerlink" title="检查异常进程"></a>检查异常进程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps aux|<span class="built_in">sort</span> -rn -k +3|<span class="built_in">head</span></span><br><span class="line"><span class="comment">#检查cpu占用前10</span></span><br><span class="line">ps aux|<span class="built_in">sort</span> -rn -k +4|<span class="built_in">head</span></span><br><span class="line"><span class="comment">#检查内存占用前10</span></span><br></pre></td></tr></table></figure><h3 id="关闭无效的服务及端口"><a href="#关闭无效的服务及端口" class="headerlink" title="关闭无效的服务及端口"></a>关闭无效的服务及端口</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#比如邮箱</span></span><br><span class="line">service postfix status</span><br><span class="line">chkconfig --del postfix</span><br><span class="line">chkconfig postfix off</span><br><span class="line"></span><br><span class="line"><span class="comment">#比如cpus</span></span><br><span class="line">service cups status</span><br><span class="line">chkconfig --del cups</span><br><span class="line">chkconfig cups off</span><br></pre></td></tr></table></figure><h3 id="设置防火墙策略"><a href="#设置防火墙策略" class="headerlink" title="设置防火墙策略"></a>设置防火墙策略</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#或者用防火墙策略：</span></span><br><span class="line">service iptables status</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;请根据用户实际业务端口占用等情况进行设置！&#x27;</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gedit /etc/sysconfig/iptables <span class="comment">#添加如下策略</span></span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 8080 -j ACCEPT</span><br><span class="line">-A INPUT -m state --state NEW -m udp -p udp --dport 8080 -j ACCEPT</span><br></pre></td></tr></table></figure><p>以下举例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -I INPUT -s 22.48.11.11 -j DROP</span><br><span class="line"><span class="comment"># 22.48.11.11的包全部屏蔽</span></span><br><span class="line">iptables -I INPUT -s 22.48.11.0/24 -j DROP</span><br><span class="line"><span class="comment">#22.48.11.1到22.48.11.255的访问全部屏蔽</span></span><br><span class="line">iptables -I INPUT -s 192.168.1.1 -p tcp --dport 80 -j DROP</span><br><span class="line"><span class="comment"># 192.168.1.1的80端口的访问全部屏蔽</span></span><br><span class="line">iptables -I INPUT -s 192.168.1.0/24 -p tcp --dport 80 -j DROP</span><br><span class="line"><span class="comment">#192.168.1.1到192.168.1.255的80端口的访问全部屏蔽</span></span><br><span class="line">service iptabels restart</span><br><span class="line"><span class="comment">#重启防火墙</span></span><br></pre></td></tr></table></figure><h3 id="设置历史记录数量"><a href="#设置历史记录数量" class="headerlink" title="设置历史记录数量"></a>设置历史记录数量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> /etc/profile /etc/profile_xu_bak <span class="comment">#（备份）</span></span><br><span class="line">sed -i s/<span class="string">&#x27;HISTSIZE=1000&#x27;</span>/<span class="string">&#x27;HISTSIZE=5000&#x27;</span>/g /etc/profile  <span class="comment">#（修改）</span></span><br><span class="line"><span class="built_in">cat</span> /etc/profile |grep HISTSIZE|grep -v <span class="built_in">export</span>   <span class="comment">#（检查）</span></span><br></pre></td></tr></table></figure><h3 id="配置用户最小权限"><a href="#配置用户最小权限" class="headerlink" title="配置用户最小权限"></a>配置用户最小权限</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 644 /etc/passwd</span><br><span class="line"><span class="built_in">chmod</span> 400 /etc/shadow</span><br><span class="line"><span class="built_in">chmod</span> 644 /etc/group</span><br></pre></td></tr></table></figure><h3 id="文件与目录缺省权限控制"><a href="#文件与目录缺省权限控制" class="headerlink" title="文件与目录缺省权限控制"></a>文件与目录缺省权限控制</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> /etc/profile /etc/profile.bak  <span class="comment">#（备份）</span></span><br><span class="line">gedit  /etc/profile</span><br><span class="line"><span class="comment">#增加</span></span><br><span class="line"><span class="built_in">umask</span> 027</span><br><span class="line"><span class="built_in">source</span>  /etc/profile</span><br></pre></td></tr></table></figure><h2 id="0x04-日志审计"><a href="#0x04-日志审计" class="headerlink" title="0x04 日志审计"></a>0x04 日志审计</h2><h3 id="启用远程日志功能"><a href="#启用远程日志功能" class="headerlink" title="启用远程日志功能"></a>启用远程日志功能</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gedit /etc/rsyslog.conf</span><br><span class="line">*.*         @Syslog日志服务器IP</span><br></pre></td></tr></table></figure><blockquote><p>注意：* 和@之间存在的是tab键，非空格。</p></blockquote><h3 id="检查是否记录安全事件日志"><a href="#检查是否记录安全事件日志" class="headerlink" title="检查是否记录安全事件日志"></a>检查是否记录安全事件日志</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gedit  /etc/syslog.conf 或者 /etc/rsyslog.conf</span><br><span class="line"><span class="comment">#在文件中加入如下内容:</span></span><br><span class="line">*.err;kern.debug;daemon.notice     /var/log/messages</span><br><span class="line"><span class="built_in">chmod</span> 640 /var/log/messages</span><br><span class="line">service rsyslog restart</span><br></pre></td></tr></table></figure><h3 id="日志保留半年以上"><a href="#日志保留半年以上" class="headerlink" title="日志保留半年以上"></a>日志保留半年以上</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span>/etc/logrotate.conf /etc/logrotate.conf_xu_bak   <span class="comment">#（备份）</span></span><br><span class="line">sed -i s/<span class="string">&#x27;rotate 4&#x27;</span>/<span class="string">&#x27;rotate 12&#x27;</span>/g /etc/logrotate.conf   <span class="comment">#（修改）</span></span><br><span class="line">service syslog restart    <span class="comment">#（重启）</span></span><br><span class="line"><span class="built_in">cat</span> /etc/logrotate.conf |grep -v <span class="string">&#x27;#&#x27;</span> |grep rotate    <span class="comment">#（检查）</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x01-前-言&quot;&gt;&lt;a href=&quot;#0x01-前-言&quot; class=&quot;headerlink&quot; title=&quot;0x01 前 言&quot;&gt;&lt;/a&gt;0x01 前 言&lt;/h2&gt;&lt;p&gt;Linux系统被应用于大部分企业的服务器上，因此在等保测评中主机加固也是必须要完成的一项环节</summary>
      
    
    
    
    <category term="信息安全" scheme="https://aisk.cc/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Linux" scheme="https://aisk.cc/tags/Linux/"/>
    
    <category term="主机加固" scheme="https://aisk.cc/tags/%E4%B8%BB%E6%9C%BA%E5%8A%A0%E5%9B%BA/"/>
    
    <category term="PAM认证" scheme="https://aisk.cc/tags/PAM%E8%AE%A4%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>基于Docker部署jumpserver环境</title>
    <link href="https://aisk.cc/posts/12a1.html"/>
    <id>https://aisk.cc/posts/12a1.html</id>
    <published>2020-09-26T03:00:00.000Z</published>
    <updated>2023-04-02T12:32:46.050Z</updated>
    
    <content type="html"><![CDATA[<p>在 Docker中部署jumpserver环境也可以分为几次情况</p><ul><li>环境都在一个docker镜像中，这种环境不建议</li><li>环境分为三个docker镜像，jumpserver、mysql、redis各一个镜像</li></ul><p>本次我们部署环境为第二种情况</p><h2 id="0x01-安装-Docker"><a href="#0x01-安装-Docker" class="headerlink" title="0x01 安装 Docker"></a>0x01 安装 Docker</h2><h3 id="配置国内映像源"><a href="#配置国内映像源" class="headerlink" title="配置国内映像源"></a>配置国内映像源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /etc/docker</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">    \&quot;registry-mirrors\&quot; : [</span></span><br><span class="line"><span class="string">    \&quot;https://registry.docker-cn.com\&quot;,</span></span><br><span class="line"><span class="string">    \&quot;https://docker.mirrors.ustc.edu.cn\&quot;,</span></span><br><span class="line"><span class="string">    \&quot;http://hub-mirror.c.163.com\&quot;,</span></span><br><span class="line"><span class="string">    \&quot;https://cr.console.aliyun.com/\&quot;</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;&quot;</span>&gt;&gt;/etc/docker/daemon.json</span><br></pre></td></tr></table></figure><h3 id="安装配置docker"><a href="#安装配置docker" class="headerlink" title="安装配置docker"></a>安装配置docker</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install yum-utils</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">yum makecache fast</span><br><span class="line">yum -y install docker-ce</span><br><span class="line">systemctl start docker &amp;&amp; systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h3 id="生成秘钥"><a href="#生成秘钥" class="headerlink" title="生成秘钥"></a>生成秘钥</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$SECRET_KEY</span>&quot;</span> = <span class="string">&quot;&quot;</span> ]; <span class="keyword">then</span> SECRET_KEY=`<span class="built_in">cat</span> /dev/urandom | <span class="built_in">tr</span> -dc A-Za-z0-9 | <span class="built_in">head</span> -c 50`; <span class="built_in">echo</span> <span class="string">&quot;SECRET_KEY=<span class="variable">$SECRET_KEY</span>&quot;</span> &gt;&gt; ~/.bashrc; <span class="built_in">echo</span> <span class="variable">$SECRET_KEY</span>; <span class="keyword">else</span> <span class="built_in">echo</span> <span class="variable">$SECRET_KEY</span>; <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$BOOTSTRAP_TOKEN</span>&quot;</span> = <span class="string">&quot;&quot;</span> ]; <span class="keyword">then</span> BOOTSTRAP_TOKEN=`<span class="built_in">cat</span> /dev/urandom | <span class="built_in">tr</span> -dc A-Za-z0-9 | <span class="built_in">head</span> -c 16`; <span class="built_in">echo</span> <span class="string">&quot;BOOTSTRAP_TOKEN=<span class="variable">$BOOTSTRAP_TOKEN</span>&quot;</span> &gt;&gt; ~/.bashrc; <span class="built_in">echo</span> <span class="variable">$BOOTSTRAP_TOKEN</span>; <span class="keyword">else</span> <span class="built_in">echo</span> <span class="variable">$BOOTSTRAP_TOKEN</span>; <span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>注：生成完 SECRET_KEY 和 BOOTSTRAP_TOKEN 变量后一定要确认一下，如果出现异常将会影响到后面的过程</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看秘钥是否生成</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$SECRET_KEY</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$BOOTSTRAP_TOKEN</span></span><br></pre></td></tr></table></figure><p>创建jms容器中的日志及数据挂到宿机的目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /home/jumpserver/data</span><br><span class="line"><span class="built_in">mkdir</span> -p /home/koko/data</span><br><span class="line"><span class="built_in">mkdir</span> -p /home/nginx/logs</span><br><span class="line"><span class="built_in">mkdir</span> -p /home/mysql/&#123;data,logs,conf&#125;</span><br></pre></td></tr></table></figure><h2 id="0x02-映像拉取"><a href="#0x02-映像拉取" class="headerlink" title="0x02 映像拉取"></a>0x02 映像拉取</h2><h3 id="mysql-映像拉取"><a href="#mysql-映像拉取" class="headerlink" title="mysql 映像拉取"></a>mysql 映像拉取</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#docker pull mysql</span></span><br><span class="line">docker run --restart=always \</span><br><span class="line">--name mysql5.7 -<span class="built_in">id</span> \</span><br><span class="line">-e MYSQL_DATABASE=<span class="string">&quot;jumpserver&quot;</span> \</span><br><span class="line">-e MYSQL_USER=<span class="string">&quot;jumpserver&quot;</span> \</span><br><span class="line">-e MYSQL_PASSWORD=<span class="string">&quot;Ya0ling&quot;</span> \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=<span class="string">&quot;Ya0ling&quot;</span> \</span><br><span class="line">-v /home/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /home/mysql/logs:/var/log/mysql/ \</span><br><span class="line">-v /home/mysql/conf:/etc/mysql/ \</span><br><span class="line">-p 3306:3306 -d mysql:5.7.20</span><br></pre></td></tr></table></figure><h3 id="redis-映像拉取"><a href="#redis-映像拉取" class="headerlink" title="redis 映像拉取"></a>redis 映像拉取</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#docker pull redis</span></span><br><span class="line"><span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;vm.overcommit_memory=1&quot;</span>&gt;&gt;/etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.core.somaxconn= 1024&quot;</span>&gt;&gt;/etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&#x27;echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled&#x27;&quot;</span>&gt;&gt;/etc/rc.local</span><br><span class="line">sysctl -p</span><br><span class="line"><span class="comment"># 拉取映像</span></span><br><span class="line">docker run -p 6379:6379 --name redis -v /home/redis/data:/data -d redis redis-server --requirepass <span class="string">&quot;Ya0ling&quot;</span> --appendonly <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><p>redis容器中登录方式</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看映像运行情况</span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="comment"># 登录 redis 映像</span></span><br><span class="line">docker <span class="built_in">exec</span> -it redis /bin/bash</span><br><span class="line"><span class="comment"># 映像中登录 redis 查看key</span></span><br><span class="line">redis-cli -h localhost -p 6379</span><br><span class="line"><span class="comment"># 输入 redis 密码</span></span><br><span class="line">auth Ya0ling</span><br><span class="line"><span class="comment"># 查看 key</span></span><br><span class="line">auth key *</span><br><span class="line"><span class="comment">#退出</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><blockquote><p>#注意映射关系修改配置为支持utf8mb4,或使用客户端登录修改jumpserver数据库编码</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /data/mysql/conf/mysql.cnf</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line"></span><br><span class="line">root@ubuntu:~<span class="comment"># vim /data/mysql/conf/mysqld.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">pid-file        = /var/run/mysqld/mysqld.pid</span><br><span class="line">socket          = /var/run/mysqld/mysqld.sock</span><br><span class="line">datadir         = /var/lib/mysql</span><br><span class="line"><span class="comment">#log-error      = /var/log/mysql/error.log</span></span><br><span class="line"><span class="comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class="line">symbolic-links=0</span><br><span class="line">character-set-server=utf8mb4</span><br></pre></td></tr></table></figure><p>创建数据库并设置为utf8mb4编码</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create database jumpserver default charset <span class="string">&#x27;utf8mb4&#x27;</span> collate <span class="string">&#x27;utf8mb4_general_ci&#x27;</span>;</span><br><span class="line">grant all on jumpserver.* to <span class="string">&#x27;jumpserver&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;weakPassword&#x27;</span>;</span><br></pre></td></tr></table></figure><p>修改数据库的字符集</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt;use jumpserver</span><br><span class="line">mysql&gt;alter database jumpserver character <span class="built_in">set</span> utf8mb4;</span><br><span class="line"><span class="comment"># 查看数据库编码</span></span><br><span class="line">show variables like <span class="string">&#x27;%char%&#x27;</span>;</span><br><span class="line"><span class="comment"># 暂时设置编码</span></span><br><span class="line"><span class="built_in">set</span> character_set_client=utf8mb4;</span><br></pre></td></tr></table></figure><p>修改my.conf设置编码</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line">[mysqld]</span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line">collation-server=utf8mb4_general_ci</span><br></pre></td></tr></table></figure><h3 id="拉取-jumpserver-映像"><a href="#拉取-jumpserver-映像" class="headerlink" title="拉取 jumpserver 映像"></a>拉取 jumpserver 映像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#docker pull jms</span></span><br><span class="line">docker run --restart=always \</span><br><span class="line">--name jms_all -d \</span><br><span class="line">-p 80:80 -p 2222:2222 \</span><br><span class="line">-e SECRET_KEY=<span class="variable">$SECRET_KEY</span> \</span><br><span class="line">-e BOOTSTRAP_TOKEN=<span class="variable">$BOOTSTRAP_TOKEN</span> \</span><br><span class="line">-v /home/jumpserver/data:/opt/jumpserver/data \</span><br><span class="line">-v /home/jumpserver/logs:/opt/jumpserver/logs \</span><br><span class="line">-v /home/koko/data:/jumpserver/koko/data \</span><br><span class="line">-v /home/nginx/logs:/var/log/nginx/ \</span><br><span class="line">-e DB_HOST=<span class="string">&quot;mysql5.7&quot;</span> \</span><br><span class="line">-e DB_PORT=3306 \</span><br><span class="line">-e DB_USER=root \</span><br><span class="line">-e DB_PASSWORD=Ya0ling \</span><br><span class="line">-e DB_NAME=jumpserver \</span><br><span class="line">--<span class="built_in">link</span> mysql5.7:mysql \</span><br><span class="line">-e REDIS_HOST=redis \</span><br><span class="line">-e REDIS_PORT=6379 \</span><br><span class="line">-e REDIS_PASSWORD=Ya0ling \</span><br><span class="line">--<span class="built_in">link</span> redis:redis \</span><br><span class="line">jumpserver/jms_all:latest</span><br></pre></td></tr></table></figure><p>测试（其他机器连接，连接用户是admin，密码是admin）</p><p>docker容器设置开机自启动：</p><ul><li>–restart具体参数值详细信息</li><li>no - 容器退出时，不重启容器</li><li>on-failure - 只有在非0状态退出时才从新启动容器</li><li>always - 无论退出状态是如何，都重启容器<br>使用 on-failure 策略时指定 Docker 将尝试重新启动容器的最大次数；默认情况下Docker将尝试永远重新启动容器；</li><li>docker run –restart&#x3D;on-failure:10 redis<br>如果创建容器时未指定 –restart&#x3D;always ,可通过 update 命令更改；    </li><li>docker update –restart&#x3D;always 容器ID</li></ul><blockquote><p>如未使用–restart&#x3D;always选项，在服务器或其他情况导致服务器关机&#x2F;重启，再次启动容器时需先起MySQL、redis，最后起jms</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 Docker中部署jumpserver环境也可以分为几次情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;环境都在一个docker镜像中，这种环境不建议&lt;/li&gt;
&lt;li&gt;环境分为三个docker镜像，jumpserver、mysql、redis各一个镜像&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本</summary>
      
    
    
    
    <category term="环境部署" scheme="https://aisk.cc/categories/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    
    
    <category term="Linux" scheme="https://aisk.cc/tags/Linux/"/>
    
    <category term="Docker" scheme="https://aisk.cc/tags/Docker/"/>
    
    <category term="jumpserver" scheme="https://aisk.cc/tags/jumpserver/"/>
    
  </entry>
  
  <entry>
    <title>如何重置jumpserver管理员密码</title>
    <link href="https://aisk.cc/posts/96f0.html"/>
    <id>https://aisk.cc/posts/96f0.html</id>
    <published>2020-09-25T03:00:00.000Z</published>
    <updated>2023-04-02T12:32:46.050Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-重置管理员密码"><a href="#0x01-重置管理员密码" class="headerlink" title="0x01 重置管理员密码"></a>0x01 重置管理员密码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 管理密码忘记了或者重置管理员密码</span></span><br><span class="line">$ <span class="built_in">source</span> /opt/py3/bin/activate</span><br><span class="line">$ <span class="built_in">cd</span> /opt/jumpserver/apps</span><br><span class="line">$ python manage.py changepassword  admin</span><br><span class="line"><span class="comment">#输入新的密码</span></span><br><span class="line">$ password</span><br></pre></td></tr></table></figure><h2 id="0x02-新建超级管理账号（死而复生）"><a href="#0x02-新建超级管理账号（死而复生）" class="headerlink" title="0x02 新建超级管理账号（死而复生）"></a>0x02 新建超级管理账号（死而复生）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建超级用户的命令如下命令</span></span><br><span class="line">$ python manage.py createsuperuser --username=user --email=user@domain.com</span><br><span class="line"><span class="comment"># 设备新用户密码</span></span><br><span class="line">$ password:</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x01-重置管理员密码&quot;&gt;&lt;a href=&quot;#0x01-重置管理员密码&quot; class=&quot;headerlink&quot; title=&quot;0x01 重置管理员密码&quot;&gt;&lt;/a&gt;0x01 重置管理员密码&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;t</summary>
      
    
    
    
    <category term="环境部署" scheme="https://aisk.cc/categories/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    
    
    <category term="Linux" scheme="https://aisk.cc/tags/Linux/"/>
    
    <category term="jumpserver" scheme="https://aisk.cc/tags/jumpserver/"/>
    
  </entry>
  
  <entry>
    <title>基于Docker部署GitLab环境搭建</title>
    <link href="https://aisk.cc/posts/3184.html"/>
    <id>https://aisk.cc/posts/3184.html</id>
    <published>2020-09-24T03:00:00.000Z</published>
    <updated>2023-04-02T12:32:46.050Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习自动化部署的一些内容，涉及到的内容有Docker、Jenkins、Gitlab等内容，今天通过docker玩了一遍gitlab，下面是一些心得。</p><h2 id="0x01-前提条件"><a href="#0x01-前提条件" class="headerlink" title="0x01 前提条件"></a>0x01 前提条件</h2><ul><li>（1）存在docker</li><li>（2）服务器可以联网（外网）</li><li>（3）服务器内存至少4G（内存不够会出现502错误）</li></ul><h2 id="0x02-安装"><a href="#0x02-安装" class="headerlink" title="0x02 安装"></a>0x02 安装</h2><p>本次安装在CentOS7下进行，下面的命令建议复制到记事本后再从记事本复制</p><h3 id="卸载旧版docker"><a href="#卸载旧版docker" class="headerlink" title="卸载旧版docker"></a>卸载旧版docker</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><h3 id="配置-docker-拉取源"><a href="#配置-docker-拉取源" class="headerlink" title="配置 docker 拉取源"></a>配置 docker 拉取源</h3><p>如不配置源因网络原因可能会拉取失败，配置国内拉取源提升稳定性。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /etc/docker</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">    \&quot;registry-mirrors\&quot; : [</span></span><br><span class="line"><span class="string">    \&quot;https://registry.docker-cn.com\&quot;,</span></span><br><span class="line"><span class="string">    \&quot;https://docker.mirrors.ustc.edu.cn\&quot;,</span></span><br><span class="line"><span class="string">    \&quot;http://hub-mirror.c.163.com\&quot;,</span></span><br><span class="line"><span class="string">    \&quot;https://cr.console.aliyun.com/\&quot;</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;&quot;</span>&gt;&gt;/etc/docker/daemon.json</span><br></pre></td></tr></table></figure><h3 id="安装docker并配置docker源"><a href="#安装docker并配置docker源" class="headerlink" title="安装docker并配置docker源"></a>安装docker并配置docker源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install yum-utils</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">yum-config-manager --<span class="built_in">enable</span> docker-ce-nightly</span><br><span class="line">yum-config-manager --<span class="built_in">enable</span> docker-ce-test</span><br><span class="line">yum makecache fast</span><br><span class="line">yum -y install docker-ce docker-ce-cli containerd.io</span><br><span class="line">systemctl start docker &amp;&amp; systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h3 id="gitlab镜像拉取"><a href="#gitlab镜像拉取" class="headerlink" title="gitlab镜像拉取"></a>gitlab镜像拉取</h3><blockquote><p>gitlab-ce为稳定版本，后面不填写版本则默认pull最新latest版本</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker pull gitlab/gitlab-ce:latest</span><br><span class="line">$ <span class="built_in">mkdir</span> -p /home/gitlab/&#123;config,logs,data&#125;</span><br></pre></td></tr></table></figure><h2 id="0x03-配置环境"><a href="#0x03-配置环境" class="headerlink" title="0x03 配置环境"></a>0x03 配置环境</h2><h3 id="运行gitlab镜像"><a href="#运行gitlab镜像" class="headerlink" title="运行gitlab镜像"></a>运行gitlab镜像</h3><p>拉取gitlab镜像并配置环境</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -d \</span><br><span class="line"> -p 443:443 \</span><br><span class="line"> -p 80:80 \</span><br><span class="line"> -p 222:22 \</span><br><span class="line"> --name gitlab \</span><br><span class="line"> --restart always \</span><br><span class="line"> -v /home/gitlab/config:/etc/gitlab \</span><br><span class="line"> -v /home/gitlab/logs:/var/log/gitlab \</span><br><span class="line"> -v /home/gitlab/data:/var/opt/gitlab \</span><br><span class="line"> gitlab/gitlab-ce</span><br></pre></td></tr></table></figure><ul><li>-d：后台运行</li><li>-p：将容器内部端口向外映射</li><li>–name：命名容器名称</li><li>-v：将容器内数据文件夹或者日志、配置等文件夹挂载到宿主机指定目录</li></ul><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>按上面的方式，gitlab容器运行没问题，但在gitlab上创建项目的时候，生成项目的URL访问地址是按容器的hostname来生成的，也就是容器的id。作为gitlab服务器，我们需要一个固定的URL访问地址，于是需要配置gitlab.rb（宿主机路径：<code>/home/gitlab/config/gitlab.rb</code>）。</p><p>gitlab.rb文件内容默认全是注释</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /home/gitlab/config/gitlab.rb</span><br><span class="line"><span class="comment"># 配置http协议所使用的访问地址,不加端口号默认为80</span></span><br><span class="line">external_url <span class="string">&#x27;http://192.168.199.231&#x27;</span></span><br><span class="line"><span class="comment"># 配置ssh协议所使用的访问地址和端口</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_ssh_host&#x27;</span>] = <span class="string">&#x27;192.168.199.231&#x27;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_shell_ssh_port&#x27;</span>] = 222</span><br><span class="line"><span class="comment"># 此端口是run时22端口映射的222端口</span></span><br><span class="line">:wq <span class="comment">#保存配置文件并退出</span></span><br></pre></td></tr></table></figure><p>修改邮箱</p><p>在gitlab.rb文件的最后添加如下代码</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 是否启用</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_enable&#x27;</span>] = <span class="literal">true</span></span><br><span class="line"><span class="comment"># SMTP服务的地址</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_address&#x27;</span>] = <span class="string">&quot;smtp.qq.com&quot;</span></span><br><span class="line"><span class="comment"># 端口</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_port&#x27;</span>] = 465</span><br><span class="line"><span class="comment"># 你的QQ邮箱（发送账号）</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_user_name&#x27;</span>] = <span class="string">&quot;xxx@qq.com&quot;</span></span><br><span class="line"><span class="comment"># 授权码</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_password&#x27;</span>] = <span class="string">&quot;********&quot;</span></span><br><span class="line"><span class="comment"># 域名</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_domain&#x27;</span>] = <span class="string">&quot;smtp.qq.com&quot;</span></span><br><span class="line"><span class="comment"># 登录验证</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_authentication&#x27;</span>] = <span class="string">&quot;login&quot;</span></span><br><span class="line"><span class="comment"># 使用了465端口，就需要配置下面三项</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_enable_starttls_auto&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_tls&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_openssl_verify_mode&#x27;</span>] = <span class="string">&#x27;none&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 你的QQ邮箱（发送账号）</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_email_from&#x27;</span>] = <span class="string">&#x27;xxx@qq.com&#x27;</span></span><br></pre></td></tr></table></figure><p>应用配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><p>修改port</p><p>修改gitlab.yml文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 文件路径 /opt/gitlab/embedded/service/gitlab-rails/config</span><br><span class="line">sudo <span class="built_in">cd</span> /opt/gitlab/embedded/service/gitlab-rails/config</span><br><span class="line">vim gitlab.yml</span><br><span class="line">// 修改port 为8090</span><br></pre></td></tr></table></figure><p>重启gitlab容器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker restart gitlab</span><br><span class="line"><span class="comment"># 查看启动情况</span></span><br><span class="line">$ docker ps</span><br><span class="line"><span class="comment"># 登录容器</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it gitlab <span class="comment">#!/usr/bin/env bash</span></span><br></pre></td></tr></table></figure><p>验证邮箱服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 在容器中进入命令行</span><br><span class="line">sudo gitlab-rails console</span><br><span class="line">// 测试邮件发送</span><br><span class="line">sudo Notify.test_email(<span class="string">&quot;xxx@163.com&quot;</span>,<span class="string">&quot;title&quot;</span>,<span class="string">&quot;gitlab&quot;</span>).deliver_now</span><br><span class="line">// 退出命令行</span><br><span class="line">sudo <span class="built_in">exit</span></span><br><span class="line">// 退出容器</span><br><span class="line">sudo <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>此时项目的仓库地址就变了。如果ssh端口地址不是默认的22，就会加上ssh:&#x2F;&#x2F; 协议头</p><p>打开浏览器输入ip地址(因为我的gitlab端口为80，所以浏览器url不用输入端口号，如果端口号不是80，则打开为：ip:端口号)</p><p>第一次进入要输入新的root用户密码，设置好之后确定就行<br>下面我们就可以新建一个项目了，点击Create a project<br>创建项目。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在学习自动化部署的一些内容，涉及到的内容有Docker、Jenkins、Gitlab等内容，今天通过docker玩了一遍gitlab，下面是一些心得。&lt;/p&gt;
&lt;h2 id=&quot;0x01-前提条件&quot;&gt;&lt;a href=&quot;#0x01-前提条件&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="环境部署" scheme="https://aisk.cc/categories/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    
    
    <category term="Linux" scheme="https://aisk.cc/tags/Linux/"/>
    
    <category term="GitLab" scheme="https://aisk.cc/tags/GitLab/"/>
    
    <category term="Docker" scheme="https://aisk.cc/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>安装配置Docker环境</title>
    <link href="https://aisk.cc/posts/5d00.html"/>
    <id>https://aisk.cc/posts/5d00.html</id>
    <published>2020-09-23T03:00:00.000Z</published>
    <updated>2023-04-02T12:32:46.050Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-Docker-简介"><a href="#0x01-Docker-简介" class="headerlink" title="0x01 Docker 简介"></a>0x01 Docker 简介</h2><p>Docker是一个软件集装箱化平台，这意味着您可以构建应用程序，将它与其依赖关系一起打包到一个容器中，然后这些容器可以很容易地运送到其他机器上运行。<br>但什么是集装箱？集装化（也称为基于容器的虚拟化和应用程序集装箱化）是用于部署和运行分布式应用程序的OS级虚拟化方法，无需为每个应用程序启动整个VM。 相反，多个独立的系统（称为容器）在单个控制主机上运行并访问单个内核。<br>容器映像是一个轻量级的、独立的、可执行的软件包，它包括运行它所需的一切：代码、运行时、系统工具、系统库设置。<br>所以主要目标是将软件打包成标准化的单元进行开发，发货和部署。</p><h2 id="0x02-安装前配置"><a href="#0x02-安装前配置" class="headerlink" title="0x02 安装前配置"></a>0x02 安装前配置</h2><h3 id="Docker版本检查"><a href="#Docker版本检查" class="headerlink" title="Docker版本检查"></a>Docker版本检查</h3><p>docker要求CentOS 系统的内核版本高于 3.10 ，内存须 4G 以上，安装之前首先要验证你的CentOS 版本是否支持 Docker 。</p><p>通过uname -r 命令查看你当前的内核版本（建议使用xshell连接虚拟机进行命令操作）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">uname</span> -r</span><br></pre></td></tr></table></figure><h3 id="更新系统"><a href="#更新系统" class="headerlink" title="更新系统"></a>更新系统</h3><p>使用root 权限登录 CentOS。确保 yum 包更新到最新。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y update</span><br></pre></td></tr></table></figure><h3 id="卸载旧版本（如果安装过就版本的话）"><a href="#卸载旧版本（如果安装过就版本的话）" class="headerlink" title="卸载旧版本（如果安装过就版本的话）"></a>卸载旧版本（如果安装过就版本的话）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum remove docker \</span><br><span class="line">             docker-common \</span><br><span class="line">             docker-selinux \</span><br><span class="line">             docker-engine \</span><br><span class="line">             docker-client \</span><br><span class="line">             docker-client-latest \</span><br><span class="line">             docker-latest \</span><br><span class="line">             docker-latest-logrotate \</span><br><span class="line">             docker-logrotate</span><br></pre></td></tr></table></figure><p>如果安装过旧版本docker，有就会卸载当前版本；如果没安装过，运行上面的命令也没关系，只是提示未安装</p><h3 id="安装需要的软件包"><a href="#安装需要的软件包" class="headerlink" title="安装需要的软件包"></a>安装需要的软件包</h3><p>yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><h3 id="设置yum源"><a href="#设置yum源" class="headerlink" title="设置yum源"></a>设置yum源</h3><p>设置国内常用源，如清华镜像仓库，速度很快<br>如果没有安装wget则安装，如已安装则会跳过</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">yum-config-manager --<span class="built_in">enable</span> docker-ce-nightly</span><br><span class="line">yum-config-manager --<span class="built_in">enable</span> docker-ce-test</span><br><span class="line"><span class="comment">#清缓存</span></span><br><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><h2 id="0x03-安装-docker-ce"><a href="#0x03-安装-docker-ce" class="headerlink" title="0x03 安装 docker-ce"></a>0x03 安装 docker-ce</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装 docker-ce</span></span><br><span class="line">yum -y install docker-ce docker-ce-cli containerd.io</span><br><span class="line">systemctl start docker &amp;&amp; systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h3 id="搜索安装指定版本"><a href="#搜索安装指定版本" class="headerlink" title="搜索安装指定版本"></a>搜索安装指定版本</h3><p>查看源中所有版本 docker-ce</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum list docker-ce --showduplicates | <span class="built_in">sort</span> -r</span><br><span class="line"><span class="comment"># 安装指定版本 docker</span></span><br><span class="line">yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span><br></pre></td></tr></table></figure><h3 id="搜索映像"><a href="#搜索映像" class="headerlink" title="搜索映像"></a>搜索映像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure><h3 id="运行hello-world-映像来验证是否正确安装了Docker-Engine"><a href="#运行hello-world-映像来验证是否正确安装了Docker-Engine" class="headerlink" title="运行hello-world 映像来验证是否正确安装了Docker Engine"></a>运行hello-world 映像来验证是否正确安装了Docker Engine</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><h4 id="下载映像后面可加版本号"><a href="#下载映像后面可加版本号" class="headerlink" title="下载映像后面可加版本号"></a>下载映像后面可加版本号</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure><h3 id="查看运行中的映像"><a href="#查看运行中的映像" class="headerlink" title="查看运行中的映像"></a>查看运行中的映像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><h3 id="查看本地所有映像"><a href="#查看本地所有映像" class="headerlink" title="查看本地所有映像"></a>查看本地所有映像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><h3 id="查看本地映像"><a href="#查看本地映像" class="headerlink" title="查看本地映像"></a>查看本地映像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h3 id="停止运行的映像"><a href="#停止运行的映像" class="headerlink" title="停止运行的映像"></a>停止运行的映像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop name/id</span><br></pre></td></tr></table></figure><h3 id="启动映像"><a href="#启动映像" class="headerlink" title="启动映像"></a>启动映像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start name/id</span><br></pre></td></tr></table></figure><h3 id="登录docker映像"><a href="#登录docker映像" class="headerlink" title="登录docker映像"></a>登录docker映像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it name/id  /bin/sh</span><br></pre></td></tr></table></figure><h3 id="卸载Docker"><a href="#卸载Docker" class="headerlink" title="卸载Docker"></a>卸载Docker</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><h3 id="删除所有图像，容器和卷"><a href="#删除所有图像，容器和卷" class="headerlink" title="删除所有图像，容器和卷"></a>删除所有图像，容器和卷</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf /var/lib/docker</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x01-Docker-简介&quot;&gt;&lt;a href=&quot;#0x01-Docker-简介&quot; class=&quot;headerlink&quot; title=&quot;0x01 Docker 简介&quot;&gt;&lt;/a&gt;0x01 Docker 简介&lt;/h2&gt;&lt;p&gt;Docker是一个软件集装箱化平台，这意味着</summary>
      
    
    
    
    <category term="环境部署" scheme="https://aisk.cc/categories/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    
    
    <category term="Linux" scheme="https://aisk.cc/tags/Linux/"/>
    
    <category term="Docker" scheme="https://aisk.cc/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>CentOS8编译安装配置MySQL8数据库</title>
    <link href="https://aisk.cc/posts/a7ac.html"/>
    <id>https://aisk.cc/posts/a7ac.html</id>
    <published>2020-09-22T03:00:00.000Z</published>
    <updated>2023-04-02T12:32:46.050Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>操作系统：CentOS 8.1</p><p>MySQL版本：MySQL-8.0.18</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="1、系统安装"><a href="#1、系统安装" class="headerlink" title="1、系统安装"></a>1、系统安装</h3><p>略</p><h3 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h3><p>CentOS 从7.x开始默认使用的是firewall作为防火墙，这里改为iptables防火墙。</p><h4 id="1、关闭firewall"><a href="#1、关闭firewall" class="headerlink" title="1、关闭firewall"></a>1、关闭firewall</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service <span class="comment">#停止firewall</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service <span class="comment">#禁止firewall开机启动</span></span><br><span class="line">systemctl mask firewalld</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">yum remove firewalld</span><br></pre></td></tr></table></figure><h4 id="2、安装iptables防火墙"><a href="#2、安装iptables防火墙" class="headerlink" title="2、安装iptables防火墙"></a>2、安装iptables防火墙</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install iptables-services <span class="comment">#安装</span></span><br><span class="line">vi /etc/sysconfig/iptables <span class="comment">#编辑防火墙配置文件，开发mysql默认端口3306</span></span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT</span><br><span class="line">systemctl restart iptables.service <span class="comment">#最后重启防火墙使配置生效</span></span><br><span class="line">systemctl <span class="built_in">enable</span> iptables.service <span class="comment">#设置防火墙开机启动</span></span><br><span class="line">/usr/libexec/iptables/iptables.init restart <span class="comment">#重启防火墙</span></span><br></pre></td></tr></table></figure><h3 id="关闭SELINUX"><a href="#关闭SELINUX" class="headerlink" title="关闭SELINUX"></a>关闭SELINUX</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/selinux/config</span><br><span class="line"><span class="comment">#SELINUX=enforcing #注释掉</span></span><br><span class="line"><span class="comment">#SELINUXTYPE=targeted #注释掉</span></span><br><span class="line">SELINUX=disabled <span class="comment">#增加</span></span><br><span class="line">:wq! <span class="comment">#保存退出</span></span><br><span class="line">setenforce 0 <span class="comment">#使配置立即生效</span></span><br></pre></td></tr></table></figure><h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><h3 id="规划目录"><a href="#规划目录" class="headerlink" title="规划目录"></a>规划目录</h3><p>软件源代码包存放位置：<code>/usr/local/src</code></p><p>源码包编译安装位置：<code>/usr/local/软件名字</code></p><h3 id="下载软件包"><a href="#下载软件包" class="headerlink" title="下载软件包"></a>下载软件包</h3><h4 id="1、mysql"><a href="#1、mysql" class="headerlink" title="1、mysql"></a>1、mysql</h4><p><code>https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-8.0.18.tar.gz</code></p><h4 id="2、rpcsvc-proto-CentOS-8编译安装MySQL8需要"><a href="#2、rpcsvc-proto-CentOS-8编译安装MySQL8需要" class="headerlink" title="2、rpcsvc-proto #CentOS 8编译安装MySQL8需要"></a>2、rpcsvc-proto #CentOS 8编译安装MySQL8需要</h4><p><code>https://github.com/thkukuk/rpcsvc-proto/releases/download/v1.4/rpcsvc-proto-1.4.tar.gz</code></p><h4 id="3、boost-1-70-0-CentOS-8编译安装MySQL8需要"><a href="#3、boost-1-70-0-CentOS-8编译安装MySQL8需要" class="headerlink" title="3、boost_1_70_0 #CentOS 8编译安装MySQL8需要"></a>3、boost_1_70_0 #CentOS 8编译安装MySQL8需要</h4><p><code>https://dl.bintray.com/boostorg/release/1.70.0/source/boost_1_70_0.tar.gz</code></p><h4 id="4、cmake-编译安装MySQL需要"><a href="#4、cmake-编译安装MySQL需要" class="headerlink" title="4、cmake #编译安装MySQL需要"></a>4、cmake #编译安装MySQL需要</h4><p><code>https://github.com/Kitware/CMake/releases/download/v3.15.4/cmake-3.15.4.tar.gz</code></p><h4 id="五、安装编译工具及库文件（使用yum命令安装）"><a href="#五、安装编译工具及库文件（使用yum命令安装）" class="headerlink" title="五、安装编译工具及库文件（使用yum命令安装）"></a>五、安装编译工具及库文件（使用yum命令安装）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install apr* autoconf automake bison bzip2 bzip2* cpp curl curl-devel fontconfig fontconfig-devel freetype-devel gcc gcc-c++ gd gd-devel gettext gettext-devel glibc kernel kernel-headers keyutils keyutils-libs-devel krb5-devel libcom_err-devel libpng libpng-devel libjpeg* libsepol-devel libselinux-devel libstdc++-devel libtool* libgomp libxml2 libxml2-devel libXpm* libxml* libXaw-devel libXmu-devel libtiff libtiff* make openssl openssl-devel patch pcre-devel perl php-common php-gd policycoreutils telnet wget zlib-devel ncurses-devel libtirpc-devel gtk* ntpstat na* bison*</span><br></pre></td></tr></table></figure><h3 id="安装篇"><a href="#安装篇" class="headerlink" title="安装篇"></a>安装篇</h3><p>以下是用putty工具远程登录到服务器，在命令行下面操作的</p><h4 id="一、安装MySQL"><a href="#一、安装MySQL" class="headerlink" title="一、安装MySQL"></a>一、安装MySQL</h4><h5 id="1、安装rpcsvc-proto"><a href="#1、安装rpcsvc-proto" class="headerlink" title="1、安装rpcsvc-proto"></a>1、安装rpcsvc-proto</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/src</span><br><span class="line">tar zxvf rpcsvc-proto-1.4.tar.gz</span><br><span class="line"><span class="built_in">cd</span> rpcsvc-proto-1.4</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h5 id="2、安装cmake"><a href="#2、安装cmake" class="headerlink" title="2、安装cmake"></a>2、安装cmake</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/src</span><br><span class="line">tar zxvf cmake-3.15.4.tar.gz</span><br><span class="line"><span class="built_in">cd</span> cmake-3.15.4</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h5 id="3、安装MySQL"><a href="#3、安装MySQL" class="headerlink" title="3、安装MySQL"></a>3、安装MySQL</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/src</span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/boost</span><br><span class="line"><span class="built_in">cp</span> boost_1_70_0.tar.gz /usr/local/boost</span><br><span class="line">groupadd mysql <span class="comment">#添加mysql组</span></span><br><span class="line">useradd -g mysql mysql -s /bin/false <span class="comment">#创建用户mysql并加入到mysql组，不允许mysql用户直接登录系统</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /data/mysql <span class="comment">#创建MySQL数据库存放目录</span></span><br><span class="line"><span class="built_in">chown</span> -R mysql:mysql /data/mysql <span class="comment">#设置MySQL数据库存放目录权限</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/mysql <span class="comment">#创建MySQL安装目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/src <span class="comment">#进入软件包存放目录</span></span><br><span class="line">tar zxvf mysql-8.0.18.tar.gz <span class="comment">#解压</span></span><br><span class="line"><span class="built_in">cd</span> mysql-8.0.18 <span class="comment">#进入目录</span></span><br><span class="line">cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DINSTALL_DATADIR=/data/mysql -DMYSQL_USER=mysql -DMYSQL_UNIX_ADDR=/tmp/mysqld.sock -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_EMBEDDED_SERVER=1 -DFORCE_INSOURCE_BUILD=1 -DWITH_MYISAM_STORAGE_ENGINE=1 -DENABLED_LOCAL_INFILE=1 -DEXTRA_CHARSETS=all -DWITH_BOOST=/usr/local/boost</span><br><span class="line">make <span class="comment">#编译</span></span><br><span class="line">make install <span class="comment">#安装</span></span><br><span class="line"><span class="built_in">rm</span> -rf /etc/my.cnf  <span class="comment">#删除系统默认的配置文件（如果默认没有就不用删除）</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/mysql <span class="comment">#进入MySQL安装目录</span></span><br><span class="line">./bin/mysqld --user=mysql --initialize --basedir=/usr/local/mysql --datadir=/data/mysql <span class="comment">#生成mysql系统数据库 --initialize表示默认生成密码, --initialize-insecure 表示不生成密码, 密码为空。</span></span><br><span class="line"><span class="comment">#看到这一行[Note] [MY-010454] [Server] A temporary password is generated for root@localhost: !w1YKyVFFa?-</span></span><br></pre></td></tr></table></figure><p>记录下自动生成的mysql管理员root账号登录密码<code>!w1YKyVFFa?-</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /usr/local/mysql/my.cnf</span><br><span class="line"><span class="comment">#mysql 8.x默认没有配置文件，我们自己创建一个。</span></span><br><span class="line">[client]</span><br><span class="line">port=3306</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">[mysqld]</span><br><span class="line">port=3306</span><br><span class="line">user = mysql</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">tmpdir = /tmp</span><br><span class="line">key_buffer_size=16M</span><br><span class="line">max_allowed_packet=128M</span><br><span class="line">default_authentication_plugin=mysql_native_password</span><br><span class="line"><span class="comment">#设置加密方式为mysql_native_password，MySQL 8.0默认使用caching_sha2_password加密。</span></span><br><span class="line">open_files_limit = 60000</span><br><span class="line">explicit_defaults_for_timestamp</span><br><span class="line">server-id = 1</span><br><span class="line">character-set-server = utf8</span><br><span class="line">federated</span><br><span class="line">max_connections = 1000</span><br><span class="line">max_connect_errors = 100000</span><br><span class="line">interactive_timeout = 86400</span><br><span class="line">wait_timeout = 86400</span><br><span class="line">sync_binlog=0</span><br><span class="line">back_log=100</span><br><span class="line">default-storage-engine = InnoDB</span><br><span class="line">log_slave_updates = 1</span><br><span class="line">[mysqldump]</span><br><span class="line">quick</span><br><span class="line">[client]</span><br><span class="line"><span class="comment"># The following password will be sent to all standard MySQL clients</span></span><br><span class="line">password=<span class="string">&quot;my password&quot;</span></span><br><span class="line">[mysqld-8.0]</span><br><span class="line">sql_mode=TRADITIONAL</span><br><span class="line">[mysqladmin]</span><br><span class="line">force</span><br><span class="line">[mysqld]</span><br><span class="line">key_buffer_size=16M</span><br></pre></td></tr></table></figure><p>:wq! #保存退出</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /usr/local/mysql/my.cnf /etc/my.cnf  <span class="comment">#添加到/etc目录的软连接</span></span><br><span class="line"><span class="built_in">cp</span> /usr/local/mysql/support-files/mysql.server /etc/rc.d/init.d/mysqld <span class="comment">#把Mysql加入系统启动</span></span><br><span class="line"><span class="built_in">chmod</span> 755 /etc/init.d/mysqld <span class="comment">#增加执行权限</span></span><br><span class="line">chkconfig mysqld on <span class="comment">#加入开机启动</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/rc.d/init.d/mysqld <span class="comment">#编辑</span></span><br><span class="line">basedir=/usr/local/mysql <span class="comment">#MySQL程序安装路径</span></span><br><span class="line">datadir=/data/mysql <span class="comment">#MySQl数据库存放目录</span></span><br></pre></td></tr></table></figure><p>:wq! #保存退出</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service mysqld start <span class="comment">#启动</span></span><br><span class="line">vi /etc/profile <span class="comment">#把mysql服务加入系统环境变量：在最后添加下面这一行</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/mysql/bin</span><br></pre></td></tr></table></figure><p>:wq! #保存退出</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile <span class="comment">#使配置立刻生效</span></span><br></pre></td></tr></table></figure><p>下面这两行把myslq的库文件链接到系统默认的位置，这样你在编译类似PHP等软件时可以不用指定mysql的库文件地址。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /usr/local/mysql/lib/mysql /usr/lib/mysql</span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/mysql/include/mysql /usr/include/mysql</span><br><span class="line"><span class="built_in">mkdir</span> /var/lib/mysql <span class="comment">#创建目录</span></span><br><span class="line"><span class="built_in">ln</span> -s /tmp/mysql.sock /var/lib/mysql/mysql.sock <span class="comment">#添加软链接</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p  <span class="comment">#输入之前生成的密码!w1YKyVFFa?-，回车</span></span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;123456&#x27;</span> PASSWORD EXPIRE NEVER; <span class="comment">#修改密码，NEVER表示密码永不过期</span></span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;123456&#x27;</span> PASSWORD EXPIRE NEVER;</span><br><span class="line"><span class="comment">#使用WITH mysql_native_password加密</span></span><br><span class="line"><span class="comment">#MySQL 8.0加密方式从mysql_native_password 更改为 caching_sha2_password，mysql8.x之前的客户端远程连接可能报错：authentication plugin caching_sha2</span></span><br><span class="line">flush privileges;  <span class="comment">#刷新系统授权表</span></span><br><span class="line"><span class="built_in">exit</span>  <span class="comment">#退出mysql控制台</span></span><br></pre></td></tr></table></figure><h3 id="二、创建MySQL数据库、添加用户并授权"><a href="#二、创建MySQL数据库、添加用户并授权" class="headerlink" title="二、创建MySQL数据库、添加用户并授权"></a>二、创建MySQL数据库、添加用户并授权</h3><p>数据库名称：aiotlab-db<br>数据库用户名：aiotlab<br>数据库密码：aiotlab<br>授权aiotlab用户对aiotlab-db具有全部操作权限<br>继续在mysql控制台操作</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line"><span class="comment">#输入刚刚修改过的密码123456，回车</span></span><br><span class="line">Create DATABASE IF NOT EXISTS aiotlab-db default charset utf8 COLLATE utf8_general_ci;</span><br><span class="line"><span class="comment">#创建数据库</span></span><br><span class="line">CREATE USER <span class="string">&#x27;aiotlab&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;aiotlab&#x27;</span>;</span><br><span class="line"><span class="comment">#创建用户</span></span><br><span class="line">CREATE USER <span class="string">&#x27;aiotlab&#x27;</span>@<span class="string">&#x27;127.0.0.1&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;aiotlab&#x27;</span>;</span><br><span class="line"><span class="comment">#加密方式为mysql_native_password</span></span><br><span class="line">grant all privileges on aiotlab-db.* to <span class="string">&#x27;aiotlab&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"><span class="comment">#授权用户osyunwei.com对数据库www.osyunwei.com具有全部操作权限</span></span><br><span class="line">grant all privileges on aiotlab-db.* to <span class="string">&#x27;aiotlab&#x27;</span>@<span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line"><span class="comment">#授权用户</span></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> WITH GRANT OPTION;</span><br><span class="line"><span class="comment">#授权root用户具有全部数据库本地权限</span></span><br></pre></td></tr></table></figure><p>MySQL5.7版本后要授权用户对所有数据库有SUPER权限，否则上一步对用户的授权只能连接但无任何操作权限。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grant SUPER on *.* to <span class="string">&#x27;aiotlab&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"><span class="comment">#授予用户对所有数据库有SUPER权限，否则只能连接无任何操作权限。</span></span><br><span class="line">grant SUPER on *.* to <span class="string">&#x27;aiotlab&#x27;</span>@<span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line">flush privileges;</span><br><span class="line"><span class="comment">#刷新系统授权表</span></span><br><span class="line"><span class="built_in">exit</span> <span class="comment">#退出mysql控制台</span></span><br><span class="line">service mysqld restart</span><br><span class="line"><span class="comment">#重启mysql数据库</span></span><br></pre></td></tr></table></figure><p>至此，CentOS 8.x安装MySQL 8.x并创建数据库添加用户对用户进行授权完成。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装环境&quot;&gt;&lt;a href=&quot;#安装环境&quot; class=&quot;headerlink&quot; title=&quot;安装环境&quot;&gt;&lt;/a&gt;安装环境&lt;/h2&gt;&lt;p&gt;操作系统：CentOS 8.1&lt;/p&gt;
&lt;p&gt;MySQL版本：MySQL-8.0.18&lt;/p&gt;
&lt;h2 id=&quot;环境配置&quot;&gt;</summary>
      
    
    
    
    <category term="数据库" scheme="https://aisk.cc/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="CentOS" scheme="https://aisk.cc/tags/CentOS/"/>
    
    <category term="数据库" scheme="https://aisk.cc/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MySQL" scheme="https://aisk.cc/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>修改MySQL数据库字符编码为utf8mb4解决中文乱码</title>
    <link href="https://aisk.cc/posts/688b.html"/>
    <id>https://aisk.cc/posts/688b.html</id>
    <published>2020-09-21T03:00:00.000Z</published>
    <updated>2023-04-02T12:32:46.050Z</updated>
    
    <content type="html"><![CDATA[<h3 id="故障情况"><a href="#故障情况" class="headerlink" title="故障情况"></a>故障情况</h3><p>由于MySQL编码原因会导致数据库出现乱码。修改为UTF-8后发现将emoji 文字直接写入 SQL 中，执行 insert 语句报错。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>修改MySQL数据库字符编码为utf8mb4，utf8mb4包含全世界所有国家需要用到的字符,是国际编码。</p><h3 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h3><h4 id="1、进入MySQL控制台"><a href="#1、进入MySQL控制台" class="headerlink" title="1、进入MySQL控制台"></a>1、进入MySQL控制台</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line"><span class="comment">#输入密码进入</span></span><br><span class="line">status;</span><br><span class="line"><span class="comment">#查看当前MySQL运行状态，</span></span><br><span class="line">Server characterset: latin1</span><br><span class="line">Db characterset: latin1</span><br><span class="line">Client characterset: utf8mb4</span><br><span class="line">Conn. characterset: utf8mb4</span><br></pre></td></tr></table></figure><p>默认客户端和服务器端都用了latin1编码，所以会出现乱码。</p><h4 id="2、修改mysql配置文件"><a href="#2、修改mysql配置文件" class="headerlink" title="2、修改mysql配置文件"></a>2、修改mysql配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/my.cnf</span><br><span class="line"><span class="comment">#在[client]段增加下面代码</span></span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line"><span class="comment">#在[mysqld]段增加下面的代码</span></span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line">collation-server=utf8mb4_general_ci</span><br><span class="line">:wq! <span class="comment">#保存退出</span></span><br></pre></td></tr></table></figure><h4 id="3、service-mysqld-restart-重启MySQL"><a href="#3、service-mysqld-restart-重启MySQL" class="headerlink" title="3、service mysqld restart #重启MySQL"></a>3、service mysqld restart #重启MySQL</h4><p>再次进入MySQL控制台查看字符编码</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">status;</span><br><span class="line">Server characterset: utf8mb4</span><br><span class="line">Db characterset: utf8mb4</span><br><span class="line">Client characterset: utf8mb4</span><br><span class="line">Conn. characterset: utf8mb4</span><br><span class="line"><span class="comment">#查看MySQL字符集</span></span><br><span class="line">show variables like <span class="string">&#x27;character_set_%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>MySQL数据库字符集编码修改完成！</p><p><code>参数说明</code></p><ul><li>character_set_client：客户端请求数据的字符集。</li><li>character_set_connection：从客户端接收到数据，然后传输的字符集。</li><li>character_set_database：默认数据库的字符集，无论默认数据库如何改变，都是这个字符集；如果没有默认数据库，使character_set_server指定的字符集，此参数无需设置。</li><li>character_set_filesystem：把操作系统上文件名转化成此字符集，即把character_set_client转换character_set_filesystem，默认binary即可。</li><li>character_set_results：结果集的字符集。</li><li>character_set_server：数据库服务器的默认字符集。</li><li>character_set_system：这个值总是utf8mb4，不需要设置，存储系统元数据的字符集。</li></ul><p><code>备注：</code><br>MySQL 5.5之前的版本设置办法：<br>在[client]段下添加</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">default-character-set=utf8mb4</span><br></pre></td></tr></table></figure><p>在[mysqld]段下添加</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">default-character-set=utf8mb4</span><br></pre></td></tr></table></figure><p>注意，如果修改后不能启动报错，把<code>[mysqld]</code>段下<code>default-character-set=utf8</code>改为<code>character_set_server=utf8mb4</code>，取消<code>[client]</code>段的设置。</p><p>创建数据库的命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Create DATABASE IF NOT EXISTS mydata default charset utf8mb4 COLLATE utf8mb4_general_ci;</span><br></pre></td></tr></table></figure><p>至此，修改MySQL数据库字符编码为utf8mb4解决中文乱码问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;故障情况&quot;&gt;&lt;a href=&quot;#故障情况&quot; class=&quot;headerlink&quot; title=&quot;故障情况&quot;&gt;&lt;/a&gt;故障情况&lt;/h3&gt;&lt;p&gt;由于MySQL编码原因会导致数据库出现乱码。修改为UTF-8后发现将emoji 文字直接写入 SQL 中，执行 insert</summary>
      
    
    
    
    <category term="数据库" scheme="https://aisk.cc/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="数据库" scheme="https://aisk.cc/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MySQL" scheme="https://aisk.cc/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>常用操作系统镜像下载</title>
    <link href="https://aisk.cc/posts/ios.html"/>
    <id>https://aisk.cc/posts/ios.html</id>
    <published>2020-09-20T05:00:00.000Z</published>
    <updated>2024-04-19T13:56:31.873Z</updated>
    
    <content type="html"><![CDATA[<p>目前最常见的操作系统镜像下载地址，包含 Windows、OpenEuler、RHEL、Kylin、UOS等桌面及服务器版操作系统。</p><ul><li>建议下载最新日期版本，下载后请检验SHA1值。</li></ul><h3 id="Windows-操作系统微软官方镜像"><a href="#Windows-操作系统微软官方镜像" class="headerlink" title="Windows 操作系统微软官方镜像"></a>Windows 操作系统微软官方镜像</h3><table><thead><tr><th align="left">系统版本</th><th align="center">版本号</th><th align="center">包含架构</th><th align="center">语言</th><th align="left">下载地址</th></tr></thead><tbody><tr><td align="left">Windows 11</td><td align="center">23H2</td><td align="center">amd64&#x2F;aarch64</td><td align="center">中文&#x2F;English</td><td align="left"><a href="https://pan.baidu.com/s/1SkAzemrtJZR0JlGwLJsQ-w">网盘下载</a> 提取码: fpqd</td></tr><tr><td align="left">Windows 10</td><td align="center">20H2</td><td align="center">amd64</td><td align="center">中文&#x2F;English</td><td align="left"><a href="https://pan.baidu.com/s/1SkAzemrtJZR0JlGwLJsQ-w">网盘下载</a> 提取码: fpqd</td></tr><tr><td align="left">Windows 7</td><td align="center">7601</td><td align="center">amd64</td><td align="center">中文</td><td align="left"><a href="https://pan.baidu.com/s/1gfhbvVl">网盘下载</a> 提取码:hqxx</td></tr><tr><td align="left">Windows LTSC 2021 企业版</td><td align="center">LTSC2021</td><td align="center">amd64</td><td align="center">中文&#x2F;English</td><td align="left"><a href="https://pan.baidu.com/s/1yjWJPguN1v5i9lF7Jx9wdw">网盘下载</a> 提取码: h3g3</td></tr><tr><td align="left">Windows LTSC 2019 企业版</td><td align="center">LTSC2019</td><td align="center">amd64</td><td align="center">中文&#x2F;English</td><td align="left"><a href="https://pan.baidu.com/s/1yjWJPguN1v5i9lF7Jx9wdw">网盘下载</a> 提取码: h3g3</td></tr></tbody></table><h3 id="Windows-Server-操作系统微软官方镜像"><a href="#Windows-Server-操作系统微软官方镜像" class="headerlink" title="Windows Server 操作系统微软官方镜像"></a>Windows Server 操作系统微软官方镜像</h3><table><thead><tr><th align="left">系统版本</th><th align="center">版本号</th><th align="center">包含架构</th><th align="center">语言</th><th align="left">下载地址</th></tr></thead><tbody><tr><td align="left">Windows Server 2019</td><td align="center">2019</td><td align="center">amd64</td><td align="center">中文&#x2F;English</td><td align="left"><a href="https://pan.baidu.com/s/1yjWJPguN1v5i9lF7Jx9wdw">网盘下载</a> 提取码: h3g3</td></tr><tr><td align="left">Windows Server 2016</td><td align="center">2016</td><td align="center">amd64</td><td align="center">中文&#x2F;English</td><td align="left"><a href="https://pan.baidu.com/s/1yjWJPguN1v5i9lF7Jx9wdw">网盘下载</a> 提取码: h3g3</td></tr><tr><td align="left">Windows Server 2012 R2</td><td align="center">9600</td><td align="center">amd64</td><td align="center">中文&#x2F;English</td><td align="left"><a href="http://yun.baidu.com/s/1ctmxbS">网盘下载</a> 提取码:hus9</td></tr><tr><td align="left">Windows Server 2008 R2</td><td align="center">7601</td><td align="center">amd64</td><td align="center">中文&#x2F;English</td><td align="left"><a href="http://yun.baidu.com/s/1dEPuffV">网盘下载</a> 提取码:zadg</td></tr></tbody></table><h3 id="RHEL-操作系统镜像"><a href="#RHEL-操作系统镜像" class="headerlink" title="RHEL 操作系统镜像"></a>RHEL 操作系统镜像</h3><table><thead><tr><th align="left">系统版本</th><th align="center">系统版本号</th><th align="center">系统架构</th><th align="center">语言</th><th align="left">下载地址</th></tr></thead><tbody><tr><td align="left">RedHat Enterprise Server 9</td><td align="center">9.0</td><td align="center">aarch64&#x2F;amd64</td><td align="center">多语言</td><td align="left"><a href="https://pan.baidu.com/s/1o8c5HqU">网盘下载</a> 提取码:4y57</td></tr><tr><td align="left">RedHat Enterprise Server 8</td><td align="center">8.1.0</td><td align="center">aarch64&#x2F;amd64</td><td align="center">多语言</td><td align="left"><a href="https://pan.baidu.com/s/1o8c5HqU">网盘下载</a> 提取码:4y57</td></tr><tr><td align="left">RedHat Enterprise Server 7</td><td align="center">7.7</td><td align="center">amd64</td><td align="center">多语言</td><td align="left"><a href="https://pan.baidu.com/s/1o8c5HqU">网盘下载</a> 提取码:4y57</td></tr><tr><td align="left">RedHat Enterprise Server 6</td><td align="center">6.10</td><td align="center">amd64</td><td align="center">多语言</td><td align="left"><a href="https://pan.baidu.com/s/1o8c5HqU">网盘下载</a> 提取码:4y57</td></tr></tbody></table><h3 id="Rocky-操作系统镜像"><a href="#Rocky-操作系统镜像" class="headerlink" title="Rocky  操作系统镜像"></a>Rocky  操作系统镜像</h3><table><thead><tr><th align="left">系统版本</th><th align="center">版本号</th><th align="center">包含架构</th><th align="center">语言</th><th align="left">下载地址</th></tr></thead><tbody><tr><td align="left">Rocky 9</td><td align="center">9.0</td><td align="center">aarch64&#x2F;amd64&#x2F;ppc64le</td><td align="center">多语言</td><td align="left"><a href="https://yun.baidu.com/s/1bpKkwhT">网盘下载</a> 提取码:d3y1</td></tr><tr><td align="left">Rocky 8</td><td align="center">8.2</td><td align="center">aarch64&#x2F;amd64&#x2F;ppc64le</td><td align="center">多语言</td><td align="left"><a href="https://yun.baidu.com/s/1bpKkwhT">网盘下载</a> 提取码:d3y1</td></tr></tbody></table><h3 id="OpenEuler-操作系统镜像"><a href="#OpenEuler-操作系统镜像" class="headerlink" title="OpenEuler  操作系统镜像"></a>OpenEuler  操作系统镜像</h3><table><thead><tr><th align="left">系统版本</th><th align="center">版本号</th><th align="center">包含架构</th><th align="center">语言</th><th align="left">下载地址</th></tr></thead><tbody><tr><td align="left">OpenEuler 22.3</td><td align="center">22.03-LTS-SP3</td><td align="center">aarch64&#x2F;amd64</td><td align="center">多语言</td><td align="left"><a href="https://yun.baidu.com/s/1bpKkwhT">网盘下载</a> 提取码:d3y1</td></tr><tr><td align="left">OpenEuler 20.4</td><td align="center">20.03-LTS-SP4</td><td align="center">aarch64&#x2F;amd64</td><td align="center">多语言</td><td align="left"><a href="https://yun.baidu.com/s/1bpKkwhT">网盘下载</a> 提取码:d3y1</td></tr></tbody></table><h3 id="CentOS-操作系统镜像"><a href="#CentOS-操作系统镜像" class="headerlink" title="CentOS 操作系统镜像"></a>CentOS 操作系统镜像</h3><table><thead><tr><th align="left">系统版本</th><th align="center">版本号</th><th align="center">包含架构</th><th align="center">语言</th><th align="left">下载地址</th></tr></thead><tbody><tr><td align="left">CentOS 8</td><td align="center">8.2.2004</td><td align="center">aarch64&#x2F;amd64&#x2F;ppc64le</td><td align="center">多语言</td><td align="left"><a href="https://yun.baidu.com/s/1bpKkwhT">网盘下载</a> 提取码:d3y1</td></tr><tr><td align="left">CentOS 7</td><td align="center">7.8.2003</td><td align="center">aarch64&#x2F;amd64&#x2F;ppc64le</td><td align="center">多语言</td><td align="left"><a href="https://yun.baidu.com/s/1bpKkwhT">网盘下载</a> 提取码:d3y1</td></tr><tr><td align="left">CentOS 6</td><td align="center">6.10</td><td align="center">amd64 i386</td><td align="center">多语言</td><td align="left"><a href="https://yun.baidu.com/s/1bpKkwhT">网盘下载</a> 提取码:d3y1</td></tr></tbody></table><h3 id="Ubuntu-操作系统镜像"><a href="#Ubuntu-操作系统镜像" class="headerlink" title="Ubuntu 操作系统镜像"></a>Ubuntu 操作系统镜像</h3><table><thead><tr><th align="left">系统版本</th><th align="center">系统架构</th><th align="center">系统版本号</th><th align="center">发布日期</th><th align="left">下载地址</th></tr></thead><tbody><tr><td align="left">ubuntu 24.04</td><td align="center">24.04.4</td><td align="center">amd64&#x2F;aarch64&#x2F;ppc64le</td><td align="center">多语言</td><td align="left"><a href="https://pan.baidu.com/s/1jIFT3Ky">网盘下载</a> 提取码:4nqa</td></tr><tr><td align="left">ubuntu 20.04</td><td align="center">20.04.4</td><td align="center">amd64&#x2F;aarch64&#x2F;ppc64le</td><td align="center">多语言</td><td align="left"><a href="https://pan.baidu.com/s/1jIFT3Ky">网盘下载</a> 提取码:4nqa</td></tr><tr><td align="left">ubuntu 18.04</td><td align="center">18.04.4</td><td align="center">amd64&#x2F;aarch64&#x2F;ppc64le</td><td align="center">多语言</td><td align="left"><a href="https://pan.baidu.com/s/1jIFT3Ky">网盘下载</a> 提取码:4nqa</td></tr><tr><td align="left">ubuntu 16.04</td><td align="center">16.04.6</td><td align="center">amd64&#x2F;aarch64&#x2F;ppc64le</td><td align="center">多语言</td><td align="left"><a href="https://pan.baidu.com/s/1jIFT3Ky">网盘下载</a> 提取码:4nqa</td></tr><tr><td align="left">ubuntu 14.04</td><td align="center">14.04.6</td><td align="center">amd64&#x2F;aarch64&#x2F;ppc64le</td><td align="center">多语言</td><td align="left"><a href="https://pan.baidu.com/s/1jIFT3Ky">网盘下载</a> 提取码:4nqa</td></tr></tbody></table><h3 id="UOS-Deepin-操作系统镜像"><a href="#UOS-Deepin-操作系统镜像" class="headerlink" title="UOS &amp; Deepin 操作系统镜像"></a>UOS &amp; Deepin 操作系统镜像</h3><table><thead><tr><th align="left">系统版本</th><th align="center">系统架构</th><th align="center">系统版本号</th><th align="center">发布日期</th><th align="left">下载地址</th></tr></thead><tbody><tr><td align="left">Deepin 20</td><td align="center">V20</td><td align="center">amd64</td><td align="center">多语言</td><td align="left"><a href="https://pan.baidu.com/s/1jV5diA3rhx3f3shNgkcD7Q">网盘下载</a> 提取码: e2jf</td></tr><tr><td align="left">Uos euler 20</td><td align="center">V20 1060E</td><td align="center">amd64&#x2F;aarch64</td><td align="center">多语言</td><td align="left"><a href="https://pan.baidu.com/s/1BMZrMGGb0LwsmroeH_WTbQ">网盘下载</a> 提取码: x51b</td></tr><tr><td align="left">Uos 企业版 20</td><td align="center">V20 1060D</td><td align="center">amd64&#x2F;aarch64</td><td align="center">多语言</td><td align="left"><a href="https://pan.baidu.com/s/1BMZrMGGb0LwsmroeH_WTbQ">网盘下载</a> 提取码: x51b</td></tr></tbody></table><h3 id="Kali-Linux-操作系统镜像"><a href="#Kali-Linux-操作系统镜像" class="headerlink" title="Kali Linux 操作系统镜像"></a>Kali Linux 操作系统镜像</h3><table><thead><tr><th align="left">系统版本</th><th align="center">系统架构</th><th align="center">系统版本号</th><th align="center">发布日期</th><th align="left">下载地址</th></tr></thead><tbody><tr><td align="left">kali-linux</td><td align="center">2020.3</td><td align="center">amd64&#x2F;i386</td><td align="center">多语言</td><td align="left"><a href="https://pan.baidu.com/s/1jIqRcfO">网盘下载</a> 提取码:ghgg</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;目前最常见的操作系统镜像下载地址，包含 Windows、OpenEuler、RHEL、Kylin、UOS等桌面及服务器版操作系统。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建议下载最新日期版本，下载后请检验SHA1值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Windows-操作系统微软官</summary>
      
    
    
    
    <category term="操作系统" scheme="https://aisk.cc/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Windows" scheme="https://aisk.cc/tags/Windows/"/>
    
    <category term="OS" scheme="https://aisk.cc/tags/OS/"/>
    
    <category term="RHEL" scheme="https://aisk.cc/tags/RHEL/"/>
    
    <category term="OpenEuler" scheme="https://aisk.cc/tags/OpenEuler/"/>
    
    <category term="Kylin" scheme="https://aisk.cc/tags/Kylin/"/>
    
    <category term="UOS" scheme="https://aisk.cc/tags/UOS/"/>
    
  </entry>
  
  <entry>
    <title>Linux安全加固措施方案之密码加固</title>
    <link href="https://aisk.cc/posts/d931.html"/>
    <id>https://aisk.cc/posts/d931.html</id>
    <published>2020-09-08T05:00:00.000Z</published>
    <updated>2023-04-02T12:32:46.050Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-准备工作："><a href="#0x01-准备工作：" class="headerlink" title="0x01 准备工作："></a>0x01 准备工作：</h2><p>安装 PAM 的bai cracklib 模块，cracklib 能提供额外的密码du检查能力。</p><h3 id="可用参数说明"><a href="#可用参数说明" class="headerlink" title="可用参数说明"></a>可用参数说明</h3><ul><li><p><em>debug</em> 此选项使模块的信息写入到syslog（3），显示模块的行为（此选项不写密码信息到日志文件）。</p></li><li><p><em>type&#x3D;XXX</em> 默认的动作是模块使用以下提示时，要求口令：“新的UNIX密码：“和”重新输入UNIX密码：“。默认的Word UNIX可以被替换为这个选项。</p></li><li><p><em>retry&#x3D;N</em> 改变输入密码的次数，默认值是1。就是说，如果用户输入的密码强度不够就退出。可以使用这个选项设置输入的次数，以免一切都从头再来。</p></li><li><p><em>difok&#x3D;N</em> 默认值为10。这个参数设置允许的新、旧密码相同字符的个数。不过，如果新密码中1&#x2F;2的字符和旧密码不同，则新密码被接受。</p></li><li><p><em>difignore&#x3D;N</em> 多少个字符的密码应收到difok将被忽略。默认为23</p></li><li><p><em>minlen&#x3D;N</em> 新的最低可接受的大小密码（加一个，如果没有禁用学分这是默认值）。除了在新密码的字符数，贷方（在长度+1），给出了各种人物的不同种类（其他，大写，小写，数字）。此参数的默认值是9，它是一个老式的UNIX密码的字符相同类型的所有好，但可能过低，利用一个MD5的系统增加安全性。请注意，有一个在Cracklib本身长度的限制，一“的方式太短“4极限是硬编码和定义的限制（6），将不参考minlen检查对。如果你想允许密码短短5个字符，你不应该使用这个模块。</p></li><li><p><em>dcredit&#x3D;N</em> 限制新密码中至少有多少个数字。</p></li><li><p><em>ucredit&#x3D;N</em> 限制新密码中至少有多少个大写字符。</p></li><li><p><em>lcredit&#x3D;N</em> 限制新密码中至少有多少个小写字符。</p></li><li><p><em>ocredit&#x3D;N</em> 限制新密码中至少有多少个其它的字符。</p></li></ul><h2 id="0x02-具体操作："><a href="#0x02-具体操作：" class="headerlink" title="0x02 具体操作："></a>0x02 具体操作：</h2><p>Debian、Ubuntu 或 Linux Mint 系统上：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install libpam-cracklib</span><br></pre></td></tr></table></figure><p>CentOS、Fedora、RHEL 系统已经默认安装了 cracklib PAM模块，所以在这些系统上无需执行上面的操作。</p><p>为了强制实施密码策略，需要修改 &#x2F;etc&#x2F;pam.d 目录下的 PAM 配置文件。一旦修改，策略会马上生效。<br>注意：此教程中的密码策略只对非 root 用户有效，对 root 用户无效。</p><p>策略设置：</p><h3 id="禁止使用旧密码"><a href="#禁止使用旧密码" class="headerlink" title="禁止使用旧密码"></a>禁止使用旧密码</h3><p>找到同时有 “password” 和 “pam_unix.so” 字段并且附加有 “remember&#x3D;5” 的那行，它表示禁止使用最近用过的5个密码（己使用过的密码会被保存在 &#x2F;etc&#x2F;security&#x2F;opasswd 下面）。</p><p>Debian、Ubuntu 或 Linux Mint 系统上：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vi /etc/pam.d/common-password</span><br><span class="line">password [success=1 default=ignore] pam_unix.so obscure sha512 remember=5</span><br></pre></td></tr></table></figure><p>CentOS、Fedora、RHEL 系统上：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vi /etc/pam.d/system-auth</span><br><span class="line">password sufficient pamunix.so sha512 shadow nullok tryfirstpass useauthtok remember=5</span><br></pre></td></tr></table></figure><h3 id="设置最短密码长度"><a href="#设置最短密码长度" class="headerlink" title="设置最短密码长度"></a>设置最短密码长度</h3><p>找到同时有 “password” 和 “pam_cracklib.so” 字段并且附加有 “minlen&#x3D;10” 的那行，它表示最小密码长度为（10 - 类型数量）。这里的 “类型数量” 表示不同的字符类型数量。PAM 提供4种类型符号作为密码（大写字母、小写字母、数字和标点符号）。如果密码同时用上了这4种类型的符号，并且 minlen 设为10，那么最短的密码长度允许是6个字符。</p><p>Debian、Ubuntu 或 Linux Mint 系统上：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vi /etc/pam.d/common-password</span><br><span class="line">password requisite pam_cracklib.so retry=3 minlen=10 difok=3</span><br></pre></td></tr></table></figure><p>CentOS、Fedora、RHEL 系统上：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vi /etc/pam.d/system-auth</span><br><span class="line">password requisite pam_cracklib.so retry=3 difok=3 minlen=10</span><br></pre></td></tr></table></figure><h3 id="设置密码复杂度"><a href="#设置密码复杂度" class="headerlink" title="设置密码复杂度"></a>设置密码复杂度</h3><p>找到同时有 “password” 和 “pam_cracklib.so” 字段并且附加有 “ucredit&#x3D;-1 lcredit&#x3D;-2 dcredit&#x3D;-1 ocredit&#x3D;-1” 的那行，表示密码必须至少包含一个大写字母（ucredit），两个小写字母（lcredit），一个数字（dcredit）和一个标点符号（ocredit）。</p><p>Debian、Ubuntu 或 Linux Mint 系统上：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vi /etc/pam.d/common-password</span><br><span class="line">password requisite pam_cracklib.so retry=3 minlen=10 difok=3 ucredit=-1 lcredit=-2 dcredit=-1 ocredit=-1</span><br></pre></td></tr></table></figure><p>CentOS、Fedora、RHEL 系统上：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vi /etc/pam.d/system-auth</span><br><span class="line">password requisite pam_cracklib.so retry=3 difok=3 minlen=10 ucredit=-1 lcredit=-2 dcredit=-1 ocredit=-1</span><br><span class="line"><span class="comment">#允许有3个新、旧密码相同字符，最少长度10位，至少包含1位大写字母，2位小写字母，1位数字1个字符。</span></span><br></pre></td></tr></table></figure><h3 id="设置密码过期期限"><a href="#设置密码过期期限" class="headerlink" title="设置密码过期期限"></a>设置密码过期期限</h3><p>编辑 &#x2F;etc&#x2F;login.defs 文件，可以设置当前密码的有效期限，具体变量如下所示：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vi /etc/login.defs</span><br><span class="line">PASSMAXDAYS 150</span><br><span class="line">PASSMINDAYS 0</span><br><span class="line">PASSWARNAGE 7</span><br></pre></td></tr></table></figure><p>这些设置要求用户每6个月改变密码，并且会提前7天提醒用户密码快到期了。</p><p>如果想为每个用户设置不同的密码期限，使用 chage 命令。下面的命令可以查看某个用户的密码限期：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo chage -l xmoduloLast password change : Dec 30, 2013 Password expires : never Password inactive : never Account expires : never Minimum number of days between password change : 0 Maximum number of days between password change : 99999 Number of days of warning before password expires : 7</span><br></pre></td></tr></table></figure><p>默认情况下，用户的密码永不过期。</p><h3 id="下面的命令用于修改-xmodulo-用户的密码期限："><a href="#下面的命令用于修改-xmodulo-用户的密码期限：" class="headerlink" title="下面的命令用于修改 xmodulo 用户的密码期限："></a>下面的命令用于修改 xmodulo 用户的密码期限：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo chage -E 6/30/2014 -m 5 -M 90 -I 30 -W 14 xmodulo</span><br></pre></td></tr></table></figure><p>上面的命令将密码期限设为2014年6月3日。另外，修改密码的最短周期为5天，最长周期为90天。密码过期前14天会发送消息提醒用户，过期后帐号会被锁住30天。</p><p>设置完后，验证效果。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x01-准备工作：&quot;&gt;&lt;a href=&quot;#0x01-准备工作：&quot; class=&quot;headerlink&quot; title=&quot;0x01 准备工作：&quot;&gt;&lt;/a&gt;0x01 准备工作：&lt;/h2&gt;&lt;p&gt;安装 PAM 的bai cracklib 模块，cracklib 能提供额外</summary>
      
    
    
    
    <category term="信息安全" scheme="https://aisk.cc/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="CentOS" scheme="https://aisk.cc/tags/CentOS/"/>
    
    <category term="Linux" scheme="https://aisk.cc/tags/Linux/"/>
    
    <category term="Ubuntu" scheme="https://aisk.cc/tags/Ubuntu/"/>
    
    <category term="主机加固" scheme="https://aisk.cc/tags/%E4%B8%BB%E6%9C%BA%E5%8A%A0%E5%9B%BA/"/>
    
  </entry>
  
  <entry>
    <title>Linux 系统修复</title>
    <link href="https://aisk.cc/posts/462d.html"/>
    <id>https://aisk.cc/posts/462d.html</id>
    <published>2020-09-07T03:00:00.000Z</published>
    <updated>2023-04-02T12:32:46.050Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CentOS-系统修复"><a href="#CentOS-系统修复" class="headerlink" title="CentOS 系统修复"></a>CentOS 系统修复</h3><p>首先，光盘引导选择<code>Troubleshooting</code>-<code>Rescue a CentOS system</code>,进入光盘引导修改系统，进入界面后输入<code>3</code>，进入<code>Skip to shell</code>, shell 操作界面</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ lsblk <span class="comment">#查看磁盘情况，随意挂载个磁盘查看是否为根目录。</span></span><br><span class="line">$ <span class="built_in">mkdir</span> /demo </span><br><span class="line">$ mount /dev/vda3 /demo</span><br><span class="line">$ <span class="built_in">ls</span>  <span class="comment">#查看目录是否为根目录</span></span><br><span class="line">$ umount /demo   <span class="comment">#卸载磁盘</span></span><br><span class="line">$ blkid  /dev/vda3  <span class="comment">#查看磁盘分区格式</span></span><br><span class="line">$ fsck  -fy   /dev/vda3    <span class="comment">#ext格式使用此命令修复</span></span><br><span class="line">$ xfs_repair /dev/vda3     <span class="comment">#xfs 格式使用此命令修复</span></span><br><span class="line"><span class="keyword">done</span>     <span class="comment">#说明修复完了，把iso卸载掉然后reboot就好</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>Ubuntu</strong>系统修复相同</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;CentOS-系统修复&quot;&gt;&lt;a href=&quot;#CentOS-系统修复&quot; class=&quot;headerlink&quot; title=&quot;CentOS 系统修复&quot;&gt;&lt;/a&gt;CentOS 系统修复&lt;/h3&gt;&lt;p&gt;首先，光盘引导选择&lt;code&gt;Troubleshooting&lt;/co</summary>
      
    
    
    
    <category term="操作系统" scheme="https://aisk.cc/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="CentOS" scheme="https://aisk.cc/tags/CentOS/"/>
    
    <category term="Linux" scheme="https://aisk.cc/tags/Linux/"/>
    
    <category term="Ubuntu" scheme="https://aisk.cc/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Centos7 搭建开源个人网盘Nextcloud与常用插件</title>
    <link href="https://aisk.cc/posts/e4ca.html"/>
    <id>https://aisk.cc/posts/e4ca.html</id>
    <published>2020-06-20T03:00:00.000Z</published>
    <updated>2023-04-02T12:32:46.050Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>文件服务器，是一个公司最常用的服务应用，每个公司企业基本都有自己的文件服务器实，现储存分享，上传下载文件文档等功能，常见的文件服务器就是ftp服务器，但是ftp服务器的功能实在有限，且对于普通用户使用入手难度较大，又缺乏界面，对于公司的普通用户来说，确实不是一个好的文件服务器。一般ftp也只是用户服务器，网站应用等方面。</p><p>在目前的公司企业环境中，企业网盘则是一个更好的文件服务器替代方案。百度云盘，相信大家基本都有用过吧，友好的界面交互，网页端，客户端都有，不需要任何命令，实现上传下载，分享等诸多功能。但是这种云盘毕竟不是自己的，很多公司对于将机密文件放在上面心存疑惑，且时不时的网盘关闭热潮也让人担心。既然如此，为何不搭建自己的网盘呢，于是就有了nextcloud。</p><p>对于私人网盘，市面上已经有很多的产品，很多开源半开源的云盘系统。其中最出名的就是 seafile和owncloud&#x2F;nextcloud。seafile是国人开发的，分块处理，断点上传，速度比后者要快。有社区版和企业版。社区版免费，但是功能有限，企业版要收费，功能更强大。但是社区版的功能，老实说只能满足个人使用，无法满足企业使用。而企业版要收费，费用根据公司人数不同，还需要发邮件询问。</p><p>像我着这种穷人，穷公司，人数不多，又不像花钱的，那么nextcloud就是最好的选择，nextcloud是owncloud的一个分支，由原创始人团队维护，是在owncloud被别的公司收购后，由创始人团队创立的新分支。就像 mysql和mariadb。nextcloud完全开源，功能强大，是外国人开发维护的。具体的与seafile等的对比，这里不详细说明了，有兴趣的百度就好。下面记录一下在centos7 服务器上搭建nextcloud的具体过程。</p><p> </p><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>环境: centos8<br>nextcloud: 19.0.0 <br>selinux 关闭</p><ol><li>nextcloud是php项目，这里我使用nginx，官方文档是用apache的，有一点点具别。但不大。在下载nextcloud之前，先安装nginx和php</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先删除系统可能自带的PHP和nginx，用来面命令查找是否有安装</span></span><br><span class="line">$ rpm -qa |grep php</span><br><span class="line">$ rpm -qa |grep nginx</span><br><span class="line"><span class="comment"># 强制删除软件包，软件包全称就是上面通过rpm -qa 查询到的软件包全名</span></span><br><span class="line">$ rpm -e --nodeps &#123;软件包全称&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 安装yum的epel源，这里推荐用阿里云的镜像安装，包更全。</span></span><br><span class="line">$ rpm -ivh https://mirrors.aliyun.com/epel/epel-release-latest-7.noarch.rpm</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 安装nginx</span></span><br><span class="line">$ yum install -y nginx</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 安装php的源</span></span><br><span class="line">$ rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 安装php已经会用到扩展</span></span><br><span class="line">$ yum install -y php70w-devel php70w-pear php70w-pecl php70w-gd php70w-opcache php70w-cli php70w-pdo php70w-process php70w-pecl-apcu php70w-mcrypt php70w-mysql php70w-fpm php70w-pecl-memcached php70w-common php70w-xml php70w-mbstring php70w-pecl-igbinary</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 检查是否安装成功</span></span><br><span class="line">$ nginx -v</span><br><span class="line">nginx version: nginx/1.12.2</span><br><span class="line">$ php -v</span><br><span class="line">PHP 7.0.30 (cli) (built: Apr 28 2018 08:14:08) ( NTS )</span><br><span class="line">Copyright (c) 1997-2017 The PHP Group</span><br><span class="line">Zend Engine v3.0.0, Copyright (c) 1998-2017 Zend Technologies</span><br><span class="line">    with Zend OPcache v7.0.30, Copyright (c) 1999-2017, by Zend Technologies</span><br></pre></td></tr></table></figure><ol start="2"><li>nextcloud 还需要数据库，这里我使用的mysql，mysql提前安装好或使用已有的数据库服务器，具体安装安装方式可参考我另一篇博文: 《CentOS7.2 安装mysql，并配置自动启动和远程访问》。在mysql种创建一个新的databse用于nextcloud使用.</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在装有mysql的服务器上执行</span></span><br><span class="line">$ mysql -u root -p</span><br><span class="line">&gt; create database nextcloud_db;</span><br><span class="line"><span class="comment"># 授权给自定义用户，这里以用户名：nextclouduser，密码：nextcloudpasswd，代替。</span></span><br><span class="line">&gt; grant all privileges on nextcloud_db.* to nextclouduser@localhost identified by <span class="string">&#x27;nextcloudpasswd&#x27;</span>;</span><br><span class="line">&gt; flush privileges;</span><br></pre></td></tr></table></figure><p>3.  为nextcloud 生成自签名ssl证书</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /etc/nginx/cert/    <span class="comment"># 没有则创建此文件夹</span></span><br><span class="line">$ openssl req -new -x509 -days 365 -nodes -out /etc/nginx/cert/nextcloud.crt -keyout /etc/nginx/cert/nextcloud.key</span><br><span class="line"><span class="comment"># 会出现下面的选项需要填写，可以随便填。</span></span><br><span class="line">Country Name (2 letter code) [XX]:cn                                 <span class="comment"># 国家</span></span><br><span class="line">State or Province Name (full name) []:guangdong                      <span class="comment"># 省份</span></span><br><span class="line">Locality Name (eg, city) [Default City]:guangzhou                    <span class="comment"># 地区名字</span></span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:Amos           <span class="comment"># 公司名</span></span><br><span class="line">Organizational Unit Name (eg, section) []:Technology                 <span class="comment"># 部门</span></span><br><span class="line">Common Name (eg, your name or your server<span class="string">&#x27;s hostname) []:Amos        # CA主机名</span></span><br><span class="line"><span class="string">Email Address []:Amos@Amos.com                                       # Email地址</span></span><br><span class="line"><span class="string"># 修改证书和文件夹权限</span></span><br><span class="line"><span class="string">$ chmod 600 /etc/nginx/cert/*</span></span><br><span class="line"><span class="string">$ chmod 700 /etc/nginx/cert</span></span><br></pre></td></tr></table></figure><ol start="4"><li>下载nextcloud，并配置php和nginx</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载nextcloud，官网地址为: https://nextcloud.com/install/#instructions-server</span></span><br><span class="line">$ <span class="built_in">cd</span> /usr/local/src</span><br><span class="line">$ yum install -y wget unzip</span><br><span class="line">$ wget https://download.nextcloud.com/server/releases/nextcloud-13.0.2.zip    <span class="comment"># 下载</span></span><br><span class="line">$ unzip nextcloud-13.0.2.zip    <span class="comment"># 解压</span></span><br><span class="line">$ <span class="built_in">mv</span> nextcloud /usr/share/nginx/html/    <span class="comment"># 移动到指定文件夹内</span></span><br><span class="line">$ <span class="built_in">cd</span> /usr/share/nginx/html/nextcloud     <span class="comment"># 进行nextcloud 目录中</span></span><br><span class="line">$ <span class="built_in">mkdir</span> data    <span class="comment"># 创建数据文件夹</span></span><br><span class="line">$ <span class="built_in">chown</span> nginx:nginx -R nextcloud/    <span class="comment"># 将nextcloud文件授权给nginx</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 配置php-fpm</span></span><br><span class="line">$ vim /etc/php-fpm.d/www.conf</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">user = nginx                                   //将用户和组都改为nginx</span><br><span class="line">group = nginx</span><br><span class="line">listen = 127.0.0.1:9000</span><br><span class="line"><span class="built_in">env</span>[HOSTNAME] = <span class="variable">$HOSTNAME</span>                     //将以下几行，去掉注释</span><br><span class="line"><span class="built_in">env</span>[PATH] = /usr/local/bin:/usr/bin:/bin</span><br><span class="line"><span class="built_in">env</span>[TMP] = /tmp</span><br><span class="line"><span class="built_in">env</span>[TMPDIR] = /tmp</span><br><span class="line"><span class="built_in">env</span>[TEMP] = /tmp</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 为php创建session文件夹</span></span><br><span class="line">$ <span class="built_in">mkdir</span> -p /var/lib/php/session</span><br><span class="line">$ <span class="built_in">chown</span> nginx:nginx -R /var/lib/php/session/</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 配置nginx</span></span><br><span class="line">$ <span class="built_in">cd</span> /etc/nginx/conf.d/</span><br><span class="line">$ vim nextcloud.conf</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">upstream php-handler &#123;</span><br><span class="line">    server 127.0.0.1:9000;</span><br><span class="line">    <span class="comment">#server unix:/var/run/php5-fpm.sock;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    <span class="comment"># enforce https</span></span><br><span class="line">    rewrite ^(.*)$ https://$host<span class="variable">$1</span> permanent;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name localhost;</span><br><span class="line"> </span><br><span class="line">    ssl_certificate /etc/nginx/cert/nextcloud.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/cert/nextcloud.key;</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Add headers to serve security related headers</span></span><br><span class="line">    <span class="comment"># Before enabling Strict-Transport-Security headers please read into this</span></span><br><span class="line">    <span class="comment"># topic first.</span></span><br><span class="line">    add_header Strict-Transport-Security <span class="string">&quot;max-age=15768000;</span></span><br><span class="line"><span class="string">    includeSubDomains; preload;&quot;</span>;</span><br><span class="line">    add_header X-Content-Type-Options nosniff;</span><br><span class="line">    add_header X-Frame-Options <span class="string">&quot;SAMEORIGIN&quot;</span>;</span><br><span class="line">    add_header X-XSS-Protection <span class="string">&quot;1; mode=block&quot;</span>;</span><br><span class="line">    add_header X-Robots-Tag none;</span><br><span class="line">    add_header X-Download-Options noopen;</span><br><span class="line">    add_header X-Permitted-Cross-Domain-Policies none;</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Path to the root of your installation</span></span><br><span class="line">    root /usr/share/nginx/html/nextcloud/;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    location = /robots.txt &#123;</span><br><span class="line">        allow all;</span><br><span class="line">        log_not_found off;</span><br><span class="line">        access_log off;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment"># The following 2 rules are only needed for the user_webfinger app.</span></span><br><span class="line">    <span class="comment"># Uncomment it if you&#x27;re planning to use this app.</span></span><br><span class="line">    <span class="comment">#rewrite ^/.well-known/host-meta /public.php?service=host-meta last;</span></span><br><span class="line">    <span class="comment">#rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json</span></span><br><span class="line">    <span class="comment"># last;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    location = /.well-known/carddav &#123;</span><br><span class="line">      <span class="built_in">return</span> 301 <span class="variable">$scheme</span>://<span class="variable">$host</span>/remote.php/dav;</span><br><span class="line">    &#125;</span><br><span class="line">    location = /.well-known/caldav &#123;</span><br><span class="line">      <span class="built_in">return</span> 301 <span class="variable">$scheme</span>://<span class="variable">$host</span>/remote.php/dav;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment"># set max upload size</span></span><br><span class="line">    client_max_body_size 10240M;    <span class="comment"># 上传文件最大限制，php.ini中也要修改，最后优化时会提及。</span></span><br><span class="line">    fastcgi_buffers 64 4K;</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Disable gzip to avoid the removal of the ETag header</span></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_vary on;</span><br><span class="line">    gzip_comp_level 4;</span><br><span class="line">    gzip_min_length 256;</span><br><span class="line">    gzip_proxied expired no-cache no-store private no_last_modified no_etag auth;</span><br><span class="line">    gzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Uncomment if your server is build with the ngx_pagespeed module</span></span><br><span class="line">    <span class="comment"># This module is currently not supported.</span></span><br><span class="line">    <span class="comment">#pagespeed off;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    error_page 403 /core/templates/403.php;</span><br><span class="line">    error_page 404 /core/templates/404.php;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    location / &#123;</span><br><span class="line">        rewrite ^ /index.php<span class="variable">$uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ &#123;</span><br><span class="line">        deny all;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ ^/(?:\.|autotest|occ|issue|indie|db_|console) &#123;</span><br><span class="line">        deny all;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    location ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+|core/templates/40[34])\.php(?:$|/) &#123;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">        fastcgi_split_path_info ^(.+\.php)(/.*)$;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME $document_root<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        fastcgi_param PATH_INFO <span class="variable">$fastcgi_path_info</span>;</span><br><span class="line">        fastcgi_param HTTPS on;</span><br><span class="line">        <span class="comment">#Avoid sending the security headers twice</span></span><br><span class="line">        fastcgi_param modHeadersAvailable <span class="literal">true</span>;</span><br><span class="line">        fastcgi_param front_controller_active <span class="literal">true</span>;</span><br><span class="line">        fastcgi_pass php-handler;</span><br><span class="line">        fastcgi_intercept_errors on;</span><br><span class="line">        fastcgi_request_buffering off;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    location ~ ^/(?:updater|ocs-provider)(?:$|/) &#123;</span><br><span class="line">        try_files <span class="variable">$uri</span>/ =404;</span><br><span class="line">        index index.php;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Adding the cache control header for js and css files</span></span><br><span class="line">    <span class="comment"># Make sure it is BELOW the PHP block</span></span><br><span class="line">    location ~* \.(?:css|js)$ &#123;</span><br><span class="line">        try_files <span class="variable">$uri</span> /index.php$uri$is_args<span class="variable">$args</span>;</span><br><span class="line">        add_header Cache-Control <span class="string">&quot;public, max-age=7200&quot;</span>;</span><br><span class="line">        <span class="comment"># Add headers to serve security related headers (It is intended to</span></span><br><span class="line">        <span class="comment"># have those duplicated to the ones above)</span></span><br><span class="line">        <span class="comment"># Before enabling Strict-Transport-Security headers please read into</span></span><br><span class="line">        <span class="comment"># this topic first.</span></span><br><span class="line">        add_header Strict-Transport-Security <span class="string">&quot;max-age=15768000;includeSubDomains; preload;&quot;</span>;</span><br><span class="line">        add_header X-Content-Type-Options nosniff;</span><br><span class="line">        add_header X-Frame-Options <span class="string">&quot;SAMEORIGIN&quot;</span>;</span><br><span class="line">        add_header X-XSS-Protection <span class="string">&quot;1; mode=block&quot;</span>;</span><br><span class="line">        add_header X-Robots-Tag none;</span><br><span class="line">        add_header X-Download-Options noopen;</span><br><span class="line">        add_header X-Permitted-Cross-Domain-Policies none;</span><br><span class="line">        <span class="comment"># Optional: Don&#x27;t log access to assets</span></span><br><span class="line">        access_log off;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    location ~* \.(?:svg|gif|png|html|ttf|woff|ico|jpg|jpeg)$ &#123;</span><br><span class="line">        try_files <span class="variable">$uri</span> /index.php$uri$is_args<span class="variable">$args</span>;</span><br><span class="line">        <span class="comment"># Optional: Don&#x27;t log access to other assets</span></span><br><span class="line">        access_log off;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------------------------------------------</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 将nginx原配置中80端口的配置删除</span></span><br><span class="line">$ vim /etc/nginx/nginx.conf</span><br><span class="line">--------------------------------------------------------</span><br><span class="line">server &#123;          <span class="comment"># 将80端口的server整个删除，应该我们在上面nextcloud.conf中已经配置了，这里不删除的话会导致冲突不生效。</span></span><br><span class="line">    listen 80;</span><br><span class="line">...</span><br><span class="line">  &#125;</span><br><span class="line">--------------------------------------------------------</span><br></pre></td></tr></table></figure><ol start="5"><li>启动nginx和php-fpm</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nginx -t    <span class="comment"># 检查nginx配置是否正确，出现下面输入则正确。</span></span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf <span class="built_in">test</span> is successful</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 启动并设为开机启动 nginx，php-fpm</span></span><br><span class="line">$ systemctl start nginx</span><br><span class="line">$ systemctl <span class="built_in">enable</span> nginx</span><br><span class="line">$ systemctl start php-fpm</span><br><span class="line">$ systemctl <span class="built_in">enable</span> php-fpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置防火墙，开放http和https的端口。</span></span><br><span class="line">$ firewall-cmd --add-port=80/tcp --permanent</span><br><span class="line">$ firewall-cmd --add-port=443/tcp --permanent</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>PS： 这里我的selinux是关闭的，如果selinux没有关闭，则执行下面命令关闭selinux</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ setenforce 0    <span class="comment"># 关闭selinux</span></span><br><span class="line">$ vim /etc/selinux/config    <span class="comment"># 修改配置，永久关闭。</span></span><br><span class="line">------------------------------------------------------</span><br><span class="line">SELINUX=disabled</span><br><span class="line">------------------------------------------------------</span><br></pre></td></tr></table></figure><ol start="6"><li>访问网页界面，完成安装。访问搭建nextcloud服务器的ip地址。（如果有域名就访问域名）<br>按照实际情况进行配置，配置完成后，点击安装完成。上图中mysql的主机名，使用上面我们自己的数据库服务器地址和端口</li></ol><p>7. 性能优化，进入主界面后，右上角自己头像，点击设置，基本设置：<br>第一项就有 安全及设置警告，这里会有配置错误提示，优化提示等。根据提示进行优化：<br>① 修改php.ini 文件，添加如下配置：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/php.ini</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">[PHP]    <span class="comment"># 在[PHP] 以下添加如下配置</span></span><br><span class="line">opcache.enable=1</span><br><span class="line">opcache.enable_cli=1</span><br><span class="line">opcache.interned_strings_buffer=8</span><br><span class="line">opcache.max_accelerated_files=10000</span><br><span class="line">opcache.memory_consumption=128</span><br><span class="line">opcache.save_comments=1</span><br><span class="line">opcache.revalidate_freq=1</span><br><span class="line">...</span><br><span class="line">upload_max_filesize = 10240M    <span class="comment"># 上传文件最大大小，可以自定义修改，默认为512M</span></span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line"> </span><br><span class="line">$ vim /etc/nginx/nginx.d/nextcloud.conf</span><br></pre></td></tr></table></figure><p>② 设置缓存后端，可以使用redis，memcache。单机或集群模式都可以。不同的配置方式可以参考官方文档。</p><p>这里我直接单机安装并配置使用memcache。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install -y memcache</span><br><span class="line">$ vim /etc/sysconfig/memcached</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">PORT=<span class="string">&quot;11211&quot;</span>    <span class="comment"># 端口</span></span><br><span class="line">USER=<span class="string">&quot;memcached&quot;</span>    <span class="comment"># 用户</span></span><br><span class="line">MAXCONN=<span class="string">&quot;1024&quot;</span>    <span class="comment"># 最大链接数</span></span><br><span class="line">CACHESIZE=<span class="string">&quot;2048&quot;</span>    <span class="comment"># 最大内存，单位M</span></span><br><span class="line">OPTIONS=<span class="string">&quot;&quot;</span></span><br><span class="line">-----------------------------------------------------------------------</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 修改nextcloud的config配置文件，添加memcached缓存配置</span></span><br><span class="line">$ vim /usr/share/nginx/html/nextcloud/config/config.php</span><br><span class="line">-----------------------------------------------------------------------</span><br><span class="line"><span class="string">&#x27;memcache.local&#x27;</span> =&gt; <span class="string">&#x27;\OC\Memcache\APCu&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;memcache.distributed&#x27;</span> =&gt; <span class="string">&#x27;\OC\Memcache\Memcached&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;memcached_servers&#x27;</span> =&gt; array(</span><br><span class="line">   array(<span class="string">&#x27;localhost&#x27;</span>, 11211),</span><br><span class="line">     ),</span><br><span class="line">-----------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>③ 重启nginx和php-fpm，是配置生效</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl start memcached</span><br><span class="line">$ systemctl <span class="built_in">enable</span> memcached</span><br><span class="line">$ systemctl restart nginx</span><br><span class="line">$ systemctl restart php-fpm</span><br></pre></td></tr></table></figure><p>④ 设置后台任务，cron执行。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/crontab    <span class="comment"># 修改cron配置文件，添加如下配置</span></span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line">*/15 * * * * -u nginx /usr/bin/php -f /usr/share/nginx/html/nextcloud/cron.php</span><br><span class="line">---------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><ol start="8"><li>配置邮件服务器</li></ol><p>在设置 –&gt; 其他设置 中，配置smtp服务器。并进行测试，收到邮件则为OK。</p><ol start="9"><li>到此，nextcloud已经安装完成。除此之外，nextcloud还有很多常用插件，用于拓展功能，包括官方的或个人的，点击右上角个人头像–&gt;应用</li></ol><p>在这里可以直接点击安装启动应用。非常方便。本身安装时便会自带有一些应用，这里推荐几个需要手动安装的常用应用：</p><p>①Announcement center  管理员可以发公告</p><p>②Circles 圈子，每个人都可以建立加入圈子，实现圈子的文件共享</p><p>③Group folders 组文件夹</p><p>④File access control 文件访问控制</p><p>⑤Impersonate 管理员可以模拟用户，可以以用户登陆到他们的网盘，可以看到个人用户的文件，这个有点不太隐私。</p><p>。。。</p><p>当然，还有很多有趣的应用，等你自己去发现。</p><p>OK，到此，nextcloud的搭建已经完成。自己去不断使用，不断探索功能吧。</p><p> </p><p>PS：在设置中还会一直有一些报错，虽然按照要求进行配置了，却还是报错，这就在暂且忽略掉吧</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;文件服务器，是一个公司最常用的服务应用，每个公司企业基本都有自己的文件服务器实，现储存分享，上传下载文件文档等功能，常见的文件服务器就是ft</summary>
      
    
    
    
    <category term="NextCloud" scheme="https://aisk.cc/categories/NextCloud/"/>
    
    
    <category term="CentOS" scheme="https://aisk.cc/tags/CentOS/"/>
    
    <category term="Linux" scheme="https://aisk.cc/tags/Linux/"/>
    
    <category term="NextCloud" scheme="https://aisk.cc/tags/NextCloud/"/>
    
  </entry>
  
  <entry>
    <title>Linux 存储扩容，分区扩容</title>
    <link href="https://aisk.cc/posts/fa9f.html"/>
    <id>https://aisk.cc/posts/fa9f.html</id>
    <published>2020-06-10T03:00:00.000Z</published>
    <updated>2023-04-02T12:32:46.050Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-查看系统磁盘"><a href="#0x01-查看系统磁盘" class="headerlink" title="0x01 查看系统磁盘"></a>0x01 查看系统磁盘</h3><p>使用<code>lsblk</code>可查看分区情况与磁盘大小，使用 <code>df -h</code> 命令，可以看到系统的磁盘使用情况，</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsblk</span><br><span class="line"><span class="built_in">df</span> -Th</span><br><span class="line">Filesystem     Type      Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs       devtmpfs  3.9G     0  3.9G   0% /dev</span><br><span class="line">tmpfs          tmpfs     3.9G     0  3.9G   0% /dev/shm</span><br><span class="line">tmpfs          tmpfs     3.9G  8.6M  3.9G   1% /run</span><br><span class="line">tmpfs          tmpfs     3.9G     0  3.9G   0% /sys/fs/cgroup</span><br><span class="line">/dev/vda2      xfs        92G  3.2G   89G   4% /</span><br><span class="line">tmpfs          tmpfs     783M     0  783M   0% /run/user/0</span><br></pre></td></tr></table></figure><h3 id="0x02-Linux-磁盘扩容情况"><a href="#0x02-Linux-磁盘扩容情况" class="headerlink" title="0x02 Linux 磁盘扩容情况"></a>0x02 Linux 磁盘扩容情况</h3><p>磁盘扩容时会有几种情况</p><ol><li>横向扩容（最后一个分区扩容）</li><li>LVM分区扩容</li></ol><p>横向扩容需要扩容分区与未分区空间相邻，或最后一个分区 </p><p>LVM 分区扩容。主要的扩容方法有两种：</p><ul><li><p>通过空余的磁盘进行扩容，这个方法比较简单，不会对原有数据有影响。</p></li><li><p>将其他 LVM 分区空间取出一部分给需要扩容的 LVM 分区。</p></li></ul><p>下面就不同情况分别具体介绍。</p><h3 id="0x03-LVM分区利用空余磁盘扩容"><a href="#0x03-LVM分区利用空余磁盘扩容" class="headerlink" title="0x03 LVM分区利用空余磁盘扩容"></a>0x03 LVM分区利用空余磁盘扩容</h3><p>利用硬盘中空闲空间与添加别一个硬盘扩容基本相同，首先使用磁盘分区工具创建一个分区，再使用以下方式扩容。</p><ol><li><p>首先使用命令 fdisk -l 查看磁盘情况，此系统有两块硬盘， &#x2F;dev&#x2F;sda 21.5G， &#x2F;dev&#x2F;sdb 21.5G </p></li><li><p>创建 pv ,通过 pvcreate 命令将磁盘&#x2F;dev&#x2F;sdb 创建为一个系统 PV  </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pvcreate /dev/sdb1</span><br></pre></td></tr></table></figure></li><li><p>将 PV &#x2F;dev&#x2F;sdb 添加到卷组 VolGroup 中。磁盘已经添加到 VolGroup ，而且卷组的空间增加了 20G。使用命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vgextend VolGroup /dev/sdb1 </span><br></pre></td></tr></table></figure></li><li><p>为&#x2F; 添加 10G 的空间。使用命令 </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lvextend -r -L +10G /dev/mapper/VolGroup-lv_root</span><br><span class="line"><span class="comment">#使用 -r 添加后自动刷新，不再需要第5步</span></span><br></pre></td></tr></table></figure></li><li><p>逻辑卷扩展后并不会马上生效，需要使用“resize2fs” 命令重新加载逻辑卷的大小。使用命令 </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">resize2fs /dev/VolGroup/lv_root</span><br></pre></td></tr></table></figure></li></ol><p>再使用命令 df -h 查看发现&#x2F;已经多了 10G。  </p><h3 id="0x04-利用其他-LVM-分区空余空间进行扩容"><a href="#0x04-利用其他-LVM-分区空余空间进行扩容" class="headerlink" title="0x04 利用其他 LVM 分区空余空间进行扩容"></a>0x04 利用其他 LVM 分区空余空间进行扩容</h3><ol><li><p>使用 df -h 查看每个分区的使用情况。如下，发现&#x2F;dev&#x2F;mapper&#x2F;VolGroup-lv_home 容量很充裕，本次扩容通过减少</p><p>&#x2F;dev&#x2F;mapper&#x2F;VolGroup-lv_home 的空间给&#x2F;dev&#x2F;mapper&#x2F;VolGroup-lv_root。  </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> -Th</span><br></pre></td></tr></table></figure></li><li><p>卸载&#x2F;home  </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">umount /home</span><br></pre></td></tr></table></figure><p>umount &#x2F;home 如果提示无法卸载，因为有进程占用&#x2F;home，使用如下命令来终止占用进程：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fuser -m /home</span><br></pre></td></tr></table></figure><p>如果依然无法卸载，使用以下命令：  </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">umount -l /home</span><br></pre></td></tr></table></figure></li><li><p>调整&#x2F;dev&#x2F;mapper&#x2F;VolGroup-lv_home 分区大小<br>需要先进行磁盘检测 ，输入命令 e2fsck -f &#x2F;dev&#x2F;mapper&#x2F;VolGroup-lv_home。 注意：遇到 Abort&lt; y &gt;? 这边输入的是 n，才能继续进行。 </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">e2fsck -f /dev/mapper/VolGroup-lv_home</span><br></pre></td></tr></table></figure><p> 然后输入命令 resize2fs -p &#x2F;dev&#x2F;mapper&#x2F;VolGroup-lv_home 100G，进行磁盘重订大小。  </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">resize2fs -p /dev/mapper/VolGroup-lv_home 100G</span><br></pre></td></tr></table></figure></li><li><p>重新挂载&#x2F;home  </p><p>重新挂载后，输入 df -h，发现&#x2F;dev&#x2F;mapper&#x2F;VolGroup-lv_home 已经改变。  </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount /home</span><br><span class="line"><span class="built_in">df</span> -Th</span><br></pre></td></tr></table></figure></li><li><p>设置空闲空间<br>使用命令 vgdisplay，可以看到 Free PE&#x2F;Size 25760 &#x2F; 100.62 GiB，有了 100G 的空余空间。  </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lvreduce -L 100G /dev/mapper/VolGroup-lv_home</span><br><span class="line"><span class="comment">## 查询lvg空闲容量</span></span><br><span class="line">vgdisplay</span><br></pre></td></tr></table></figure></li><li><p>把闲置空间挂在到根目录下  </p><p>刚才我们查询到还有 100.62G 的空闲空间，这时我们扩容空间时可以输入空间大小，也可以输入 +100%FREE 来表示扩容所以空闲容量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lvextend -l +100%FREE /dev/mapper/VolGroup-lv_root</span><br></pre></td></tr></table></figure><p>使用命令 resize2fs -p &#x2F;dev&#x2F;mapper&#x2F;VolGroup-lv_root， 可以不用重启，就显示最新的磁盘空间。  </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">resize2fs -p /dev/mapper/VolGroup-lv_root</span><br></pre></td></tr></table></figure></li><li><p>查看结果 </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> -Th</span><br></pre></td></tr></table></figure></li></ol><h3 id="0x05-利用parted-扩容分区（非活动分区）"><a href="#0x05-利用parted-扩容分区（非活动分区）" class="headerlink" title="0x05 利用parted 扩容分区（非活动分区）"></a>0x05 利用parted 扩容分区（非活动分区）</h3><p>parted 查看分区情况，只可扩容最后一个分区</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">parted /dev/vda <span class="built_in">print</span></span><br><span class="line">parted /dev/vda</span><br></pre></td></tr></table></figure><p>使用 resizepart 扩容最后一个分区，id为最后一个分区编号</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">resizepart <span class="built_in">id</span></span><br><span class="line">End? [21.5GB]? 100%</span><br></pre></td></tr></table></figure><p>结束位置大小输入 100% ，说明把后面所有空闲容量都加入</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span></span><br></pre></td></tr></table></figure><p>这时我们查看到已扩容完成</p><h3 id="0x06-扩容GPT分区-（-gdisk-工具-）"><a href="#0x06-扩容GPT分区-（-gdisk-工具-）" class="headerlink" title="0x06 扩容GPT分区 （ gdisk 工具 ）"></a>0x06 扩容GPT分区 （ gdisk 工具 ）</h3><p>使用 parted 扩容活动分区时会提示卸载分区，这时我们就需要使用到gdisk 分区工具</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install gdisk</span><br><span class="line"><span class="comment"># 安装 gdisk</span></span><br><span class="line">[root@i-5C222F91 ~]<span class="comment"># parted /dev/vda</span></span><br><span class="line"><span class="comment"># 输入 p 查看分区信息，这时会提示错误，输入 Fix 修复分区信息，q 退出。</span></span><br><span class="line">[root@i-5C222F91 ~]<span class="comment"># partprobe /dev/vda</span></span><br><span class="line"><span class="comment"># 刷新存储信息</span></span><br><span class="line">[root@i-5C222F91 ~]<span class="comment"># gdisk /dev/vda</span></span><br><span class="line">Command (? <span class="keyword">for</span> <span class="built_in">help</span>): p</span><br><span class="line">Number  Start (sector)    End (sector)  Size       Code  Name</span><br><span class="line">   1            2048         1026047   500.0 MiB   EF00  EFI System Partition</span><br><span class="line">   2         1026048         1640447   300.0 MiB   0700</span><br><span class="line">   3         1640448        41936895   19.2 GiB    0700</span><br><span class="line"><span class="comment">#删除原分区</span></span><br><span class="line">Command (? <span class="keyword">for</span> <span class="built_in">help</span>): d</span><br><span class="line">Partition number (1-3): 3</span><br><span class="line"><span class="comment">#新建分区，序号使用原分区序号，一路回车</span></span><br><span class="line">Command (? <span class="keyword">for</span> <span class="built_in">help</span>): n</span><br><span class="line">Partition number (3-128, default 3): 3</span><br><span class="line"><span class="comment">#查看分区情况</span></span><br><span class="line">Command (? <span class="keyword">for</span> <span class="built_in">help</span>): p</span><br><span class="line">Number  Start (sector)    End (sector)  Size       Code  Name</span><br><span class="line">   1            2048         1026047   500.0 MiB   EF00  EFI System Partition</span><br><span class="line">   2         1026048         1640447   300.0 MiB   0700</span><br><span class="line">   3         1640448       104857566   49.2 GiB    8300  Linux filesystem</span><br><span class="line"><span class="comment">#修改分区类型</span></span><br><span class="line">Command (? <span class="keyword">for</span> <span class="built_in">help</span>): t</span><br><span class="line">Partition number (1-3): 3</span><br><span class="line">Hex code or GUID (L to show codes, Enter = 8300): 0700</span><br><span class="line"><span class="comment">#检查分区情况</span></span><br><span class="line">Command (? <span class="keyword">for</span> <span class="built_in">help</span>): v</span><br><span class="line"><span class="comment">#保存分区</span></span><br><span class="line">Command (? <span class="keyword">for</span> <span class="built_in">help</span>): w</span><br><span class="line"></span><br><span class="line">Do you want to proceed? (Y/N): y</span><br><span class="line"><span class="comment">#写入分区信息</span></span><br><span class="line">[root@i-5C222F91 ~]<span class="comment"># partprobe /dev/vda</span></span><br><span class="line">[root@i-5C222F91 ~]<span class="comment"># partprobe /dev/vda3</span></span><br><span class="line"><span class="comment">#刷新存储信息，查看分区情况</span></span><br><span class="line">[root@i-5C222F91 ~]<span class="comment"># lsblk</span></span><br><span class="line"><span class="comment">#更新扩容信息</span></span><br><span class="line">[root@i-5C222F91 ~]<span class="comment"># xfs_growfs /dev/vda3</span></span><br></pre></td></tr></table></figure><h3 id="0x07-扩容mbr分区（fdisk工具）"><a href="#0x07-扩容mbr分区（fdisk工具）" class="headerlink" title="0x07  扩容mbr分区（fdisk工具）"></a>0x07  扩容mbr分区（fdisk工具）</h3><p>直接使用命令扩容系统分区会提示错误，这时我们可以使用 fdisk 扩容分区</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 刷新硬件信息</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># partprobe /dev/vda</span></span><br><span class="line"><span class="comment">## 查看磁盘情况</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># lsblk</span></span><br><span class="line">NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sr0     11:0    1 1024M  0 rom</span><br><span class="line">sr1     11:1    1 1024M  0 rom</span><br><span class="line">vda    253:0    0  100G  0 disk</span><br><span class="line">├─vda1 253:1    0    8G  0 part [SWAP]</span><br><span class="line">└─vda2 253:2    0   22G  0 part /</span><br><span class="line"></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># fdisk /dev/vda</span></span><br><span class="line">Welcome to fdisk (util-linux 2.23.2).</span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): p</span><br><span class="line"><span class="comment">##查看原分区情况</span></span><br><span class="line">Disk /dev/vda: 107.4 GB, 107374182400 bytes, 209715200 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk label <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x000504a5</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/vda1            2048    16779263     8388608   82  Linux swap / Solaris</span><br><span class="line">/dev/vda2   *    16779264    62914559    23067648   83  Linux</span><br><span class="line"><span class="comment">##删除分区，删除分区后不可以保存</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): d</span><br><span class="line">Partition number (1,2, default 2): 2</span><br><span class="line">Partition 2 is deleted</span><br><span class="line"><span class="comment">##重新创建分区</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n</span><br><span class="line">Partition <span class="built_in">type</span>:</span><br><span class="line">   p   primary (1 primary, 0 extended, 3 free)</span><br><span class="line">   e   extended</span><br><span class="line">Select (default p): p</span><br><span class="line">Partition number (2-4, default 2): 2</span><br><span class="line">First sector (16779264-209715199, default 16779264):</span><br><span class="line">Using default value 16779264</span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G&#125; (16779264-209715199, default 209715199):</span><br><span class="line">Using default value 209715199</span><br><span class="line">Partition 2 of <span class="built_in">type</span> Linux and of size 92 GiB is <span class="built_in">set</span></span><br><span class="line"><span class="comment">## 再次查看分区</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): p</span><br><span class="line"></span><br><span class="line">Disk /dev/vda: 107.4 GB, 107374182400 bytes, 209715200 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk label <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x000504a5</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/vda1            2048    16779263     8388608   82  Linux swap / Solaris</span><br><span class="line">/dev/vda2        16779264   209715199    96467968   83  Linux</span><br><span class="line"><span class="comment">## 检查分区是不否有错误</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): v</span><br><span class="line">Remaining 2047 unallocated 512-byte sectors</span><br><span class="line"><span class="comment">## 保存分区信息</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): w</span><br><span class="line">The partition table has been altered!</span><br><span class="line"></span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line"><span class="comment">## 刷新存储文件，centos6 使用 kpartx /dev/vda</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># partprobe /dev/vda</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># partprobe /dev/vda2</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># lsblk</span></span><br><span class="line">NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sr0     11:0    1 1024M  0 rom</span><br><span class="line">sr1     11:1    1 1024M  0 rom</span><br><span class="line">vda    253:0    0  100G  0 disk</span><br><span class="line">├─vda1 253:1    0    8G  0 part [SWAP]</span><br><span class="line">└─vda2 253:2    0   92G  0 part /</span><br><span class="line"><span class="comment">## lsblk 可以查看到分区已扩容，这时可看到分区类型为xfs，需要自动扩展XFS文件系统到最大的可用大小。如为 ext4 等分区请使用 resize2fs /dev/vda2</span></span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># xfs_growfs /dev/vda2</span></span><br><span class="line">meta-data=/dev/vda2              isize=512    agcount=4, agsize=1441728 blks</span><br><span class="line">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class="line">         =                       crc=1        finobt=0 spinodes=0</span><br><span class="line">data     =                       bsize=4096   blocks=5766912, imaxpct=25</span><br><span class="line">         =                       sunit=0      swidth=0 blks</span><br><span class="line">naming   =version 2              bsize=4096   ascii-ci=0 ftype=1</span><br><span class="line"><span class="built_in">log</span>      =internal               bsize=4096   blocks=2815, version=2</span><br><span class="line">         =                       sectsz=512   sunit=0 blks, lazy-count=1</span><br><span class="line">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br><span class="line">data blocks changed from 5766912 to 24116992</span><br><span class="line">[root@i-351D0B02 ~]<span class="comment"># df -Th</span></span><br><span class="line">Filesystem     Type      Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs       devtmpfs  3.9G     0  3.9G   0% /dev</span><br><span class="line">tmpfs          tmpfs     3.9G     0  3.9G   0% /dev/shm</span><br><span class="line">tmpfs          tmpfs     3.9G  8.6M  3.9G   1% /run</span><br><span class="line">tmpfs          tmpfs     3.9G     0  3.9G   0% /sys/fs/cgroup</span><br><span class="line">/dev/vda2      xfs        92G  3.2G   89G   4% /</span><br><span class="line">tmpfs          tmpfs     783M     0  783M   0% /run/user/0</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;0x01-查看系统磁盘&quot;&gt;&lt;a href=&quot;#0x01-查看系统磁盘&quot; class=&quot;headerlink&quot; title=&quot;0x01 查看系统磁盘&quot;&gt;&lt;/a&gt;0x01 查看系统磁盘&lt;/h3&gt;&lt;p&gt;使用&lt;code&gt;lsblk&lt;/code&gt;可查看分区情况与磁盘大小，使</summary>
      
    
    
    
    <category term="操作系统" scheme="https://aisk.cc/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="CentOS" scheme="https://aisk.cc/tags/CentOS/"/>
    
    <category term="Linux" scheme="https://aisk.cc/tags/Linux/"/>
    
    <category term="Ubuntu" scheme="https://aisk.cc/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Linux 查看服务器远程管理IP(DELL iDrac和HP iLO)</title>
    <link href="https://aisk.cc/posts/7f56.html"/>
    <id>https://aisk.cc/posts/7f56.html</id>
    <published>2020-05-20T03:00:00.000Z</published>
    <updated>2023-04-02T12:32:46.050Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y OpenIPMI ipmitool</span><br><span class="line">[root@localhost ~]<span class="comment"># ipmitool lan print</span></span><br><span class="line">Set <span class="keyword">in</span> Progress         : Set Complete</span><br><span class="line">IP Address Source       : Static Address</span><br><span class="line">IP Address              : 10.1.6.200</span><br><span class="line">Subnet Mask             : 255.255.255.0</span><br><span class="line">MAC Address             : e4:72:e2:c8:70:a5</span><br><span class="line">SNMP Community String   : TrapAdmin12<span class="comment">#$</span></span><br><span class="line">IP Header               : TTL=0x40 Flags=0x40 Precedence=0x00 TOS=0x10</span><br><span class="line">Default Gateway IP      : 10.1.6.254</span><br></pre></td></tr></table></figure><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install ipmitool</span><br><span class="line">[root@localhost ~]<span class="comment"># ipmitool lan print</span></span><br><span class="line">Set <span class="keyword">in</span> Progress         : Set Complete</span><br><span class="line">IP Address Source       : Static Address</span><br><span class="line">IP Address              : 10.1.6.200</span><br><span class="line">Subnet Mask             : 255.255.255.0</span><br><span class="line">MAC Address             : e4:72:e2:c8:70:a5</span><br><span class="line">SNMP Community String   : TrapAdmin12<span class="comment">#$</span></span><br><span class="line">IP Header               : TTL=0x40 Flags=0x40 Precedence=0x00 TOS=0x10</span><br><span class="line">Default Gateway IP      : 10.1.6.254</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;CentOS&quot;&gt;&lt;a href=&quot;#CentOS&quot; class=&quot;headerlink&quot; title=&quot;CentOS&quot;&gt;&lt;/a&gt;CentOS&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code</summary>
      
    
    
    
    <category term="操作系统" scheme="https://aisk.cc/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="CentOS" scheme="https://aisk.cc/tags/CentOS/"/>
    
    <category term="Linux" scheme="https://aisk.cc/tags/Linux/"/>
    
    <category term="Ubuntu" scheme="https://aisk.cc/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统单用户模式</title>
    <link href="https://aisk.cc/posts/9014.html"/>
    <id>https://aisk.cc/posts/9014.html</id>
    <published>2020-05-02T03:00:00.000Z</published>
    <updated>2023-04-02T12:32:46.050Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-单用户模式简介"><a href="#0x01-单用户模式简介" class="headerlink" title="0x01 单用户模式简介"></a>0x01 单用户模式简介</h3><p>忘记root密码这个问题出现的几率是很高的，不过，在linux下解决这个问题也很简单，只需重启linux系统，然后引导进入linux的单用户模式（init1），由于单用户模式是不需要输入登录密码的，因此，可以直接登录系统，修改root密码即可解决问题。</p><p>Centos6启动时读取的文件为：<code>/etc/grub.cfg</code></p><p>Centos7启动时读取的文件为：<code>/etc/grub2.cfg</code></p><h3 id="0x02-CentOS6进入单用户模式"><a href="#0x02-CentOS6进入单用户模式" class="headerlink" title="0x02 CentOS6进入单用户模式"></a>0x02 CentOS6进入单用户模式</h3><p>1、重启系统，进入系统欢迎界面按上下左右键进入GRUB界面；</p><p>2、在GRUB界面选择内核版本，按下’e’键；</p><p>3、在此界面可以进行编辑，在最后输入<code>single</code>再按回车键返回,选择kernel这行，并按下’b’键进入单用户模式。</p><p>4、修改密码</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ Passwd root <span class="comment">#对root密码进行修改</span></span><br></pre></td></tr></table></figure><p>5、reboot进行系统重启</p><h3 id="0x03-CentOS7进入单用户模式"><a href="#0x03-CentOS7进入单用户模式" class="headerlink" title="0x03 CentOS7进入单用户模式"></a>0x03 CentOS7进入单用户模式</h3><p>1、进入GRUB页面，选择相应的内核，按下’e’键；<br>备注：第一行为内核；第二行为援救模式。</p><p>2、进入内核修改信息界面，找到Linux16这一行；在这一行的末尾加上 <code>init=/bin/sh</code>按下 <code>Ctrl + x</code>进入单用户模式</p><p>3、进入单用户后，重新挂载根目录，使其可写；</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mount -o remount,rw /</span><br></pre></td></tr></table></figure><p>4、修改字符集（可选）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ Locale <span class="comment">#查看当前字符集</span></span><br><span class="line">$ <span class="built_in">export</span> LANG=en_US</span><br></pre></td></tr></table></figure><p>将终端的字符集改为英文</p><p>5、修改密码</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ passwd root</span><br></pre></td></tr></table></figure><p>6、当selinux防火墙启动时，修改密码后要创建文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">touch</span> /.autorelabel</span><br></pre></td></tr></table></figure><p>否则在系统重启时无法重启</p><p>7、重启系统</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">exec</span> /sbin/init</span><br></pre></td></tr></table></figure><h3 id="0x04-CentOS8进入单用户模式"><a href="#0x04-CentOS8进入单用户模式" class="headerlink" title="0x04 CentOS8进入单用户模式"></a>0x04 CentOS8进入单用户模式</h3><p>在开机引导时按 e 键进行编辑，在linux这一行的最末尾输入<code>rd.break</code>，并删除console相关的内容，按ctrl+x 继续启动</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">linux ...    rd.break</span><br><span class="line"><span class="comment">##按 ctrl+x 继续启动</span></span><br><span class="line">mount -o remount,rw /sysroot/</span><br><span class="line"><span class="built_in">chroot</span> /sysroot/</span><br></pre></td></tr></table></figure><h3 id="0x05-OpenEuler进入单用户模式"><a href="#0x05-OpenEuler进入单用户模式" class="headerlink" title="0x05 OpenEuler进入单用户模式"></a>0x05 OpenEuler进入单用户模式</h3><p>openeuler为华为提供社区维护系统，引导界面输入 <code>e</code> ，linux这行最后面输入：<code>init=/bin/sh</code>  然后ctrl+x进入界面</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">init=/bin/sh</span><br><span class="line">mount -o remount,rw /</span><br><span class="line"><span class="comment">##重置密码</span></span><br><span class="line">passwd</span><br><span class="line"><span class="comment">##输入新密码2次</span></span><br><span class="line"><span class="built_in">touch</span> /.autorelabel</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment">##重启系统</span></span><br></pre></td></tr></table></figure><h3 id="0x06-UOS-Euler进入单用户模式"><a href="#0x06-UOS-Euler进入单用户模式" class="headerlink" title="0x06 UOS Euler进入单用户模式"></a>0x06 UOS Euler进入单用户模式</h3><p>引导输入 <code>e</code> 在linux行将 <code>ro</code> 修改为 <code>rw</code>，该行最后添加 <code>single console=ttyS0</code>，最后按ctrl+x进入系统</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">single console=ttyS0</span><br></pre></td></tr></table></figure><p>经测试有时无法成功，可参考openeuler系统</p><h3 id="0x07-Kylin进入单用户模式"><a href="#0x07-Kylin进入单用户模式" class="headerlink" title="0x07 Kylin进入单用户模式"></a>0x07 Kylin进入单用户模式</h3><p>引导输入 <code>e</code> 在linux行把 <code>quiet splash</code> 删除，添加如下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">init=/bin/bash console=tty0</span><br></pre></td></tr></table></figure><p>进入时需要输入用户 <code>root</code> 密码 <code>Kylin123123</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;0x01-单用户模式简介&quot;&gt;&lt;a href=&quot;#0x01-单用户模式简介&quot; class=&quot;headerlink&quot; title=&quot;0x01 单用户模式简介&quot;&gt;&lt;/a&gt;0x01 单用户模式简介&lt;/h3&gt;&lt;p&gt;忘记root密码这个问题出现的几率是很高的，不过，在linu</summary>
      
    
    
    
    <category term="操作系统" scheme="https://aisk.cc/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="CentOS" scheme="https://aisk.cc/tags/CentOS/"/>
    
    <category term="Linux" scheme="https://aisk.cc/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>CentOS编译安装配置MariaDB数据库</title>
    <link href="https://aisk.cc/posts/ed21.html"/>
    <id>https://aisk.cc/posts/ed21.html</id>
    <published>2020-04-29T03:00:00.000Z</published>
    <updated>2023-04-02T12:32:46.050Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>操作系统：CentOS 7<br>MariaDB版本：mariadb-5.5.33a<br>MariaDB数据库存储目录：&#x2F;data&#x2F;mysql</p><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><h3 id="1、安装系统"><a href="#1、安装系统" class="headerlink" title="1、安装系统"></a>1、安装系统</h3><p>略</p><h3 id="2、配置网络"><a href="#2、配置网络" class="headerlink" title="2、配置网络"></a>2、配置网络</h3><p>略</p><h3 id="3、配置防火墙"><a href="#3、配置防火墙" class="headerlink" title="3、配置防火墙"></a>3、配置防火墙</h3><p>开启 3306 端口</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#iptables防火墙配置</span></span><br><span class="line">vi /etc/sysconfig/iptables</span><br><span class="line"><span class="comment">#允许所有IP经过3306端口通过防火墙</span></span><br><span class="line">-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT</span><br><span class="line"><span class="comment">#很多网友把这两条规则添加到防火墙配置的最后一行，导致防火墙启动失败，正确的应该是添加到默认的22端口这条规则的下面</span></span><br><span class="line"><span class="comment">#配置完后须要重启使防火墙生效</span></span><br><span class="line">/etc/init.d/iptables restart</span><br><span class="line"><span class="comment">#firewalld防火墙配置</span></span><br><span class="line"><span class="comment">#检查防火墙是否启用,及开通的端口</span></span><br><span class="line">firewall-cmd --list-all</span><br><span class="line"><span class="comment">#放通 3306端口</span></span><br><span class="line">firewall-cmd --permanent --add-port=3306/tcp</span><br><span class="line"><span class="comment">#放通 10.248.0.0/28位访问 3306端口</span></span><br><span class="line">firewall-cmd --permanent --add-rich-rule=<span class="string">&#x27;rule family=&quot;ipv4&quot; source address=&quot;10.248.0.0/28&quot;  port port=3306 protocol=tcp accept&#x27;</span></span><br><span class="line"><span class="comment">#重新载入防火墙配置使用配置生效</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3 id="4、关闭-SELINUX"><a href="#4、关闭-SELINUX" class="headerlink" title="4、关闭 SELINUX"></a>4、关闭 SELINUX</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/selinux/config</span><br><span class="line"><span class="comment">#SELINUX=enforcing #注释掉</span></span><br><span class="line"><span class="comment">#SELINUXTYPE=targeted #注释掉</span></span><br><span class="line">SELINUX=disabled <span class="comment">#增加</span></span><br><span class="line">:wq!  <span class="comment">#保存退出</span></span><br><span class="line">shutdown -r now <span class="comment">#重启系统</span></span><br></pre></td></tr></table></figure><h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><h3 id="规划目录"><a href="#规划目录" class="headerlink" title="规划目录"></a>规划目录</h3><p>MariaDB安装包存放位置：<code>/usr/local/src</code></p><p>MariaDB编译安装位置：<code>/usr/local/mysql</code></p><h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><h4 id="下载MariaDB"><a href="#下载MariaDB" class="headerlink" title="下载MariaDB"></a>下载MariaDB</h4><p>访问官网或国内源下载</p><h4 id="下载cmake（MariaDB编译工具）"><a href="#下载cmake（MariaDB编译工具）" class="headerlink" title="下载cmake（MariaDB编译工具）"></a>下载cmake（MariaDB编译工具）</h4><p><code>http://www.cmake.org/files/v2.8/cmake-2.8.12.1.tar.gz</code></p><h4 id="安装编译工具及库文件（使用CentOS-yum命令安装，安装的比较多，方便以后编译安装php、nginx等）"><a href="#安装编译工具及库文件（使用CentOS-yum命令安装，安装的比较多，方便以后编译安装php、nginx等）" class="headerlink" title="安装编译工具及库文件（使用CentOS yum命令安装，安装的比较多，方便以后编译安装php、nginx等）"></a>安装编译工具及库文件（使用CentOS yum命令安装，安装的比较多，方便以后编译安装php、nginx等）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum  install make apr* autoconf automake curl curl-devel gcc gcc-c++ gtk+-devel zlib-devel openssl openssl-devel pcre-devel gd kernel keyutils patch perl kernel-headers compat*  cpp glibc libgomp libstdc++-devel keyutils-libs-devel libsepol-devel libselinux-devel krb5-devel  libXpm* freetype freetype-devel freetype* fontconfig fontconfig-devel  libjpeg* libpng* php-common php-gd gettext gettext-devel ncurses* libtool* libxml2 libxml2-devel patch policycoreutils bison</span><br></pre></td></tr></table></figure><h3 id="安装篇"><a href="#安装篇" class="headerlink" title="安装篇"></a>安装篇</h3><h4 id="一、安装cmake"><a href="#一、安装cmake" class="headerlink" title="一、安装cmake"></a>一、安装cmake</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/src</span><br><span class="line">tar zxvf cmake-2.8.12.1.tar.gz</span><br><span class="line"><span class="built_in">cd</span> cmake-2.8.12.1</span><br><span class="line">./configure</span><br><span class="line">make   <span class="comment">#编译</span></span><br><span class="line">make install   <span class="comment">#安装</span></span><br></pre></td></tr></table></figure><h4 id="二、安装MariaDB"><a href="#二、安装MariaDB" class="headerlink" title="二、安装MariaDB"></a>二、安装MariaDB</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupadd mysql  <span class="comment">#添加MariaDB数据库安装用户组mysql</span></span><br><span class="line">useradd -g mysql mysql -s /bin/false  <span class="comment">#建用户mysql并加入到mysql组，不允许mysql用户直接登录系统</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /data/mysql  <span class="comment">#创建MariaDB数据库存放目录</span></span><br><span class="line"><span class="built_in">chown</span> -R mysql:mysql /data/mysql   <span class="comment">#设置MariaDB数据库目录权限</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/mysql <span class="comment">#创建MariaDB安装目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/src</span><br><span class="line">tar zxvf mariadb-5.5.33a.tar.gz  <span class="comment">#解压</span></span><br><span class="line"><span class="built_in">cd</span> mariadb-5.5.33a <span class="comment">#进入安装目录</span></span><br><span class="line">cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql  -DMYSQL_DATADIR=/data/mysql  -DSYSCONFDIR=/etc <span class="comment">#配置</span></span><br><span class="line">make <span class="comment">#编译</span></span><br><span class="line">make install  <span class="comment">#安装</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/mysql</span><br><span class="line"><span class="built_in">cp</span> ./support-files/my-huge.cnf  /etc/my.cnf   <span class="comment">#拷贝配置文件（注意：如果/etc目录下面默认有一个my.cnf，直接覆盖即可）</span></span><br><span class="line">vi /etc/my.cnf   <span class="comment">#编辑配置文件,在 [mysqld] 部分增加</span></span><br><span class="line">datadir = /data/mysql  <span class="comment">#添加MariaDB数据库路径</span></span><br><span class="line">./scripts/mysql_install_db --user=mysql  <span class="comment">#生成MariaDB系统数据库</span></span><br><span class="line"><span class="built_in">cp</span> ./support-files/mysql.server  /etc/rc.d/init.d/mysqld  <span class="comment">#把MariaDB加入系统启动</span></span><br><span class="line"><span class="built_in">chmod</span> 755 /etc/init.d/mysqld   <span class="comment">#增加执行权限</span></span><br><span class="line">chkconfig mysqld on  <span class="comment">#加入开机启动</span></span><br><span class="line">vi /etc/rc.d/init.d/mysqld  <span class="comment">#编辑</span></span><br><span class="line">basedir = /usr/local/mysql   <span class="comment">#MariaDB程序安装路径</span></span><br><span class="line">datadir = /data/mysql  <span class="comment">#MariaDB数据库存放目录</span></span><br><span class="line">service mysqld start  <span class="comment">#启动</span></span><br><span class="line">vi /etc/profile   <span class="comment">#把MariaDB服务加入系统环境变量：在最后添加下面这一行</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/mysql/bin</span><br><span class="line"><span class="comment">#下面这两行把MariaDB的库文件链接到系统默认的位置，这样你在编译类似PHP等软件时可以不用指定MariaDB的库文件地址。</span></span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/mysql/lib/mysql /usr/lib/mysql</span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/mysql/include/mysql /usr/include/mysql</span><br><span class="line">shutdown -r now     <span class="comment">#需要重启系统，等待系统重新启动之后继续在终端命令行下面操作</span></span><br><span class="line">mysql_secure_installation    <span class="comment">#设置MariaDB数据库root账号密码</span></span><br><span class="line"><span class="comment">#根据提示按Y 回车输入2次密码</span></span><br><span class="line"><span class="comment">#或者直接修改密码/usr/local/mysql/bin/mysqladmin -u root -p password &quot;123456&quot; #修改密码</span></span><br><span class="line">service mysqld restart  <span class="comment">#重启</span></span><br><span class="line">mysql -u root -p  <span class="comment">#输入上面设置的root密码登录到mariadb控制台</span></span><br></pre></td></tr></table></figure><p>到此，MariaDB数据库安装完成！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装环境&quot;&gt;&lt;a href=&quot;#安装环境&quot; class=&quot;headerlink&quot; title=&quot;安装环境&quot;&gt;&lt;/a&gt;安装环境&lt;/h2&gt;&lt;p&gt;操作系统：CentOS 7&lt;br&gt;MariaDB版本：mariadb-5.5.33a&lt;br&gt;MariaDB数据库存储目录：&amp;</summary>
      
    
    
    
    <category term="数据库" scheme="https://aisk.cc/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="CentOS" scheme="https://aisk.cc/tags/CentOS/"/>
    
    <category term="MariaDB" scheme="https://aisk.cc/tags/MariaDB/"/>
    
    <category term="数据库" scheme="https://aisk.cc/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Linux find命令</title>
    <link href="https://aisk.cc/posts/4935.html"/>
    <id>https://aisk.cc/posts/4935.html</id>
    <published>2020-04-28T03:00:00.000Z</published>
    <updated>2023-04-02T12:32:46.050Z</updated>
    
    <content type="html"><![CDATA[<p>Linux find命令用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find   path   -option   [   -<span class="built_in">print</span> ]   [ -<span class="built_in">exec</span>   -ok   <span class="built_in">command</span> ]   &#123;&#125; \;</span><br></pre></td></tr></table></figure><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明 :"></a>参数说明 :</h4><p>find 根据下列规则判断 path 和 expression，在命令列上第一个 - ( ) , ! 之前的部份为 path，之后的是 expression。如果 path 是空字串则使用目前路径，如果 expression 是空字串则使用 -print 为预设 expression。</p><p>expression 中可使用的选项有二三十个之多，在此只介绍最常用的部份。</p><ul><li><p>-mount, -xdev : 只检查和指定目录在同一个文件系统下的文件，避免列出其它文件系统中的文件</p></li><li><p>-amin n : 在过去 n 分钟内被读取过</p></li><li><p>-anewer file : 比文件 file 更晚被读取过的文件</p></li><li><p>-atime n : 在过去n天内被读取过的文件</p></li><li><p>-cmin n : 在过去 n 分钟内被修改过</p></li><li><p>-cnewer file :比文件 file 更新的文件</p></li><li><p>-ctime n : 在过去n天内被修改过的文件</p></li><li><p>-empty : 空的文件-gid n or -group name : gid 是 n 或是 group 名称是 name</p></li><li><p>-ipath p, -path p : 路径名称符合 p 的文件，ipath 会忽略大小写</p></li><li><p>-name name, -iname name : 文件名称符合 name 的文件。iname 会忽略大小写</p></li><li><p>-size n : 文件大小 是 n 单位，b 代表 512 位元组的区块，c 表示字元数，k 表示 kilo bytes，w 是二个位元组。-type c : 文件类型是 c 的文件。</p></li><li><p>d: 目录</p></li><li><p>c: 字型装置文件</p></li><li><p>b: 区块装置文件</p></li><li><p>p: 具名贮列</p></li><li><p>f: 一般文件</p></li><li><p>l: 符号连结</p></li><li><p>s: socket</p></li><li><p>-pid n : process id 是 n 的文件</p></li></ul><p>你可以使用 ( ) 将运算式分隔，并使用下列运算。</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">exp1 -and exp2</span><br><span class="line">! expr</span><br><span class="line">-not expr</span><br><span class="line">exp1 -or exp2</span><br><span class="line">exp1, exp2</span><br></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>将目前目录及其子目录下所有延伸档名是 c 的文件列出来。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># find . -name &quot;*.c&quot;</span></span><br></pre></td></tr></table></figure><p>将目前目录其其下子目录中所有一般文件列出</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># find . -type f</span></span><br></pre></td></tr></table></figure><p>将目前目录及其子目录下所有最近 20 天内更新过的文件列出</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># find . -ctime -20</span></span><br></pre></td></tr></table></figure><p>查找&#x2F;var&#x2F;log目录中更改时间在7日以前的普通文件，并在删除之前询问它们：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># find /var/log -type f -mtime +7 -ok rm &#123;&#125; \;</span></span><br></pre></td></tr></table></figure><p>查找前目录中文件属主具有读、写权限，并且文件所属组的用户和其他用户具有读权限的文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># find . -type f -perm 644 -exec ls -l &#123;&#125; \;</span></span><br></pre></td></tr></table></figure><p>为了查找系统中所有文件长度为0的普通文件，并列出它们的完整路径：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># find / -type f -size 0 -exec ls -l &#123;&#125; \;</span></span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">服务器磁盘满，一般由大的日志文件导致，需找到大文件并删除。</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">find / -size +500M -print0|xargs -0 <span class="built_in">du</span> -m|<span class="built_in">sort</span> -nr</span><br></pre></td></tr></table></figure><p>上述方法从根路径查找，可能列出一些系统文件。可以在这个查找之前先进行一下过滤。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">du</span> -m -d 1 /|<span class="built_in">sort</span> -nr</span><br></pre></td></tr></table></figure><p>记得写过一个xxx.c的文件，但是忘了放哪里了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -name *xxx*.c <span class="comment">#模糊查找下这个文件</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Linux find命令用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。&lt;/p&gt;
&lt;h3 id=&quot;语法&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="数据备份" scheme="https://aisk.cc/categories/%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/"/>
    
    
    <category term="Linux" scheme="https://aisk.cc/tags/Linux/"/>
    
    <category term="Ubuntu" scheme="https://aisk.cc/tags/Ubuntu/"/>
    
    <category term="备份" scheme="https://aisk.cc/tags/%E5%A4%87%E4%BB%BD/"/>
    
    <category term="恢复" scheme="https://aisk.cc/tags/%E6%81%A2%E5%A4%8D/"/>
    
  </entry>
  
</feed>
